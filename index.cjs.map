{
  "version": 3,
  "sources": ["src/core/errors.ts", "src/core/httpClient.ts", "node_modules/zod/lib/index.mjs", "src/types/auth.types.ts", "src/resources/auth.ts", "src/types/transaction.types.ts", "src/types/wallet.types.ts", "src/resources/wallets.ts", "src/core/utils.ts", "src/resources/transactions.ts", "src/types/transactionApproval.types.ts", "src/resources/transactionApprovals.ts", "src/types/permission.types.ts", "src/resources/permissions.ts", "src/types/organization.types.ts", "src/resources/organizations.ts", "src/types/apiKey.types.ts", "src/resources/apiKeys.ts", "src/types/contract.types.ts", "src/resources/contracts.ts", "src/sdk.ts", "index.ts"],
  "sourcesContent": [
    "/**\n * Base class for all SDK-specific errors.\n */\nexport class SDKError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name; // Ensure the name property is set correctly\n    // Maintains proper stack trace in V8 environments (like Node.js/Bun)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/**\n * Error indicating a problem with the API request itself or the server's response\n * (e.g., non-2xx status code).\n */\nexport class APIError extends SDKError {\n  public readonly status?: number;\n  public readonly responseBody?: any;\n  public readonly headers?: Headers;\n\n  constructor(\n    message: string,\n    status?: number,\n    responseBody?: any,\n    headers?: Headers,\n  ) {\n    super(message);\n    this.status = status;\n    this.responseBody = responseBody;\n    this.headers = headers;\n  }\n}\n\n/**\n * Error indicating an issue with authentication (e.g., missing or invalid credentials).\n */\nexport class AuthenticationError extends SDKError {\n  constructor(message: string = 'Authentication failed. Please check your API key or token.') {\n    super(message);\n  }\n}\n\n/**\n * Error indicating invalid input provided to an SDK method.\n * (Will be used more extensively when Zod validation is integrated).\n */\nexport class ValidationError extends SDKError {\n  public readonly issues?: any; // Placeholder for more detailed validation issues (e.g., from Zod)\n\n  constructor(message: string, issues?: any) {\n    super(message);\n    this.issues = issues;\n  }\n}\n\n/**\n * Error indicating a network problem or an issue reaching the server.\n */\nexport class NetworkError extends SDKError {\n  public readonly cause?: Error;\n\n  constructor(message: string, cause?: Error) {\n    super(message);\n    this.cause = cause;\n  }\n} ",
    "import { APIError, AuthenticationError, NetworkError, SDKError } from './errors';\n\n/**\n * Configuration options for the HttpClient.\n */\nexport interface HttpClientConfig {\n  baseURL: string;\n  apiKey?: string;\n  authToken?: string; // e.g., JWT Bearer token\n  organizationId?: string; // Added for API Key context\n  defaultHeaders?: Record<string, string>;\n  timeout?: number; // milliseconds\n}\n\n/**\n * Options for a single HTTP request.\n */\nexport interface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\n  queryParams?: Record<string, string | number | boolean | undefined | null>;\n  body?: any; // Can be anything JSON.stringify can handle, or FormData, etc.\n  headers?: Record<string, string>;\n  signal?: AbortSignal; // For request cancellation\n  expectedStatus?: number; // Added for expected non-ok status\n}\n\n/**\n * A wrapper around the native fetch API to handle common SDK requirements like\n * base URL, authentication, JSON parsing, and error handling.\n */\nexport class HttpClient {\n  private readonly config: HttpClientConfig;\n\n  constructor(config: HttpClientConfig) {\n    if (!config.baseURL) {\n      throw new SDKError('baseURL is required in HttpClientConfig');\n    }\n    // Add validation for apiKey/organizationId pairing\n    if (config.apiKey && !config.organizationId) {\n        console.warn('Warning: apiKey provided without organizationId. Most API Key endpoints require X-Organization-ID.');\n        // Consider throwing an error if it's strictly required:\n        // throw new SDKError('organizationId is required when using apiKey');\n    }\n\n    // Ensure baseURL doesn't end with a slash to prevent double slashes\n    this.config = {\n      ...config,\n      baseURL: config.baseURL.replace(/\\/$/, ''),\n      defaultHeaders: { 'Content-Type': 'application/json', ...config.defaultHeaders },\n    };\n  }\n\n  /**\n   * Makes an HTTP request.\n   * @param path - The API path (e.g., '/users/me').\n   * @param options - Request options (method, body, queryParams, headers).\n   * @returns A promise resolving to the parsed JSON response body.\n   * @throws {AuthenticationError} If credentials are missing when required.\n   * @throws {APIError} If the server returns a non-2xx status code.\n   * @throws {NetworkError} If there's a network issue or timeout.\n   * @throws {SDKError} For other client-side errors (e.g., JSON parsing failure).\n   */\n  public async request<T = any>(path: string, options: RequestOptions = {}): Promise<T> {\n    const { method = 'GET', queryParams, body, headers: requestHeaders, signal, expectedStatus } = options as RequestOptions & { expectedStatus?: number };\n\n    // Construct URL\n    const url = new URL(this.config.baseURL + (path.startsWith('/') ? path : `/${path}`));\n    if (queryParams) {\n      Object.entries(queryParams).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, String(value));\n        }\n      });\n    }\n\n    // Prepare headers\n    const headers = new Headers({ ...this.config.defaultHeaders, ...requestHeaders });\n\n    // --- Authentication & Organization --- //\n    if (this.config.apiKey) {\n      // Use API Key authentication\n      headers.set('X-API-Key', this.config.apiKey);\n      if (this.config.organizationId) {\n          headers.set('X-Organization-ID', this.config.organizationId);\n      } else {\n           console.warn(`Making API Key request without X-Organization-ID header for path: ${path}. This may be required.`);\n      }\n      // Ensure Authorization header is not set if using API Key\n      headers.delete('Authorization'); \n    } else if (this.config.authToken) {\n      // Use JWT authentication\n      headers.set('Authorization', `Bearer ${this.config.authToken}`);\n       // Optionally set Org ID if provided and not already set by API Key logic\n       if (this.config.organizationId && !headers.has('X-Organization-ID')) {\n           headers.set('X-Organization-ID', this.config.organizationId);\n       }\n    } // else: No authentication configured\n    // --- End Authentication & Organization ---\n\n    // Prepare body\n    let requestBody: any | null = null;\n    if (body) {\n      if (body instanceof FormData || typeof body === 'string' || body instanceof URLSearchParams || body instanceof Blob) {\n        requestBody = body;\n        headers.delete('Content-Type');\n      } else {\n        try {\n          requestBody = JSON.stringify(body);\n          if (!headers.has('Content-Type')) {\n             headers.set('Content-Type', 'application/json');\n          }\n        } catch (error) {\n          throw new SDKError('Failed to stringify request body as JSON');\n        }\n      }\n    }\n\n    // Setup timeout\n    const controller = new AbortController();\n    const timeoutSignal = this.config.timeout ? AbortSignal.timeout(this.config.timeout) : null;\n    const combinedSignal = this.getCombinedSignal(signal, controller.signal, timeoutSignal);\n\n    // --- REMOVED TEMPORARY LOGGING START ---\n    // if (path === '/wallets' && method === 'POST') { ... logging code ... }\n    // --- REMOVED TEMPORARY LOGGING END ---\n\n    // Make the request\n    let response: Response;\n    try {\n      response = await fetch(url.toString(), {\n        method,\n        headers,\n        body: requestBody,\n        signal: combinedSignal,\n      });\n    } catch (error: any) {\n        if (error.name === 'TimeoutError' || (error instanceof DOMException && error.name === 'AbortError' && timeoutSignal?.aborted) ) {\n             throw new NetworkError(`Request timed out after ${this.config.timeout}ms`, error);\n        }\n        if (error instanceof DOMException && error.name === 'AbortError') {\n             throw new SDKError(`Request aborted: ${error.message}`);\n        }\n        throw new NetworkError(`Network request failed: ${error.message}`, error);\n    }\n\n    // Handle error response\n    if (!response.ok) {\n        if (expectedStatus && response.status === expectedStatus) {\n             // Continue\n        } else {\n            let errorBody: any = null;\n            try {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                errorBody = await response.json();\n                } else {\n                errorBody = await response.text();\n                }\n            } catch (parseError) { /* Ignore */ }\n\n            const errorMessage = errorBody?.message || errorBody?.error || (typeof errorBody === 'string' ? errorBody : response.statusText);\n\n            if (response.status === 401 || response.status === 403) {\n                throw new AuthenticationError(`Authentication failed: ${errorMessage}`);\n            }\n\n            throw new APIError(\n                `API request failed with status ${response.status}: ${errorMessage}`,\n                response.status,\n                errorBody,\n                response.headers\n            );\n        }\n    }\n\n    // --- Handle successful response --- //\n    try {\n      if (response.status === 204 || response.headers.get('Content-Length') === '0') {\n        return undefined as T;\n      }\n\n      // --- REVERTED TEMPORARY LOGGING START ---\n      // const rawText = await response.text(); // Get raw text first\n      // if (path === '/organizations' && method === 'POST') {\n      //     console.log(\"[DEBUG] Raw response for POST /organizations:\", rawText);\n      // }\n      // const responseBody = JSON.parse(rawText); // Parse the raw text\n      const responseBody = await response.json(); // Reverted to original\n      // --- REVERTED TEMPORARY LOGGING END ---\n\n      // Type guard for the wrapper structure\n      const isSuccessWrapper = (\n          res: any\n      ): res is { success: true; data: T } => {\n          return (\n              typeof res === 'object' &&\n              res !== null &&\n              typeof res.success === 'boolean' &&\n              res.success === true &&\n              res.hasOwnProperty('data')\n          );\n      };\n\n      if (isSuccessWrapper(responseBody)) {\n          return responseBody.data;\n      }\n      else if (expectedStatus && response.status === expectedStatus) {\n          return responseBody as T;\n      }\n      else if (response.ok && (!expectedStatus || response.status === expectedStatus)) {\n          return responseBody as T;\n      }\n        else {\n             throw new SDKError(`Unexpected successful response structure or status mismatch. Status: ${response.status}, Expected: ${expectedStatus ?? '2xx'}`);\n        }\n\n    } catch (error: any) {\n        if (error instanceof SDKError || error instanceof APIError || error instanceof AuthenticationError || error instanceof NetworkError) {\n            throw error;\n        }\n         throw new SDKError(`Failed to parse response body as JSON or unexpected structure: ${error.message}`);\n    }\n    // --- End Handle successful response --- //\n  }\n\n  /**\n   * Combines multiple AbortSignals.\n   * The resulting signal will abort if any of the input signals abort.\n   */\n  private getCombinedSignal(...signals: (AbortSignal | null | undefined)[]): AbortSignal | undefined {\n    const validSignals = signals.filter((s): s is AbortSignal => s != null);\n    if (validSignals.length === 0) return undefined;\n    if (validSignals.length === 1) return validSignals[0];\n\n    const controller = new AbortController();\n    const onAbort = () => {\n      controller.abort();\n      cleanup();\n    };\n\n    const cleanup = () => {\n       validSignals.forEach(s => s.removeEventListener('abort', onAbort));\n    }\n\n    validSignals.forEach(s => {\n      if (s.aborted) {\n        controller.abort();\n      } else {\n        s.addEventListener('abort', onAbort);\n      }\n    });\n\n    return controller.signal;\n  }\n} ",
    "var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n",
    "import { z } from 'zod';\n\n// Base User Information (matches model.UserResponse)\nexport const UserSchema = z.object({\n  id: z.string().uuid(),\n  username: z.string(),\n  email: z.string().email(),\n  role: z.string(), // Consider z.enum(['superadmin', 'admin', 'manager', 'user']) if roles are fixed\n  createdAt: z.string().datetime().transform((val) => new Date(val)).optional(), // Made optional\n  updatedAt: z.string().datetime().transform((val) => new Date(val)).optional(), // Made optional\n  status: z.string(), // Consider z.enum(['active', 'inactive', 'suspended'])\n  emailVerified: z.boolean().optional(), // Made optional\n});\nexport type User = z.infer<typeof UserSchema>;\n\n// POST /register\nexport const UserRegistrationRequestSchema = z.object({\n  username: z.string().min(3).max(50),\n  email: z.string().email(),\n  password: z.string().min(8).max(100),\n});\nexport type UserRegistrationRequest = z.infer<typeof UserRegistrationRequestSchema>;\n// Response: UserSchema\n\n// POST /login\nexport const UserLoginRequestSchema = z.object({\n  // username: z.string().optional(), // Server code uses email binding only\n  email: z.string().email(),\n  password: z.string(),\n  mfaCode: z.string().optional(), // For HandleMFALogin endpoint\n});\nexport type UserLoginRequest = z.infer<typeof UserLoginRequestSchema>;\n\n// Input schema matching the API's snake_case response\nconst ApiTokenResponseSchema = z.object({\n  access_token: z.string(),\n  refresh_token: z.string(),\n  expires_in: z.number().int(),\n  token_type: z.literal('Bearer'),\n  user_id: z.string().uuid().optional(),\n  mfa_required: z.boolean().optional(),\n  expires_at: z.number().int().optional(), // Unix timestamp\n  refresh_expires_at: z.number().int().optional(), // Unix timestamp\n});\n\n// Output schema with camelCase and transformation\nexport const TokenResponseSchema = ApiTokenResponseSchema.transform((data) => ({\n  accessToken: data.access_token,\n  refreshToken: data.refresh_token,\n  expiresIn: data.expires_in,\n  tokenType: data.token_type,\n  userId: data.user_id,\n  mfaRequired: data.mfa_required,\n  expiresAt: data.expires_at,\n  refreshExpiresAt: data.refresh_expires_at,\n}));\n\nexport type TokenResponse = z.infer<typeof TokenResponseSchema>;\n\n// POST /refresh\nexport const RefreshTokenRequestSchema = z.object({\n  refreshToken: z.string(),\n});\nexport type RefreshTokenRequest = z.infer<typeof RefreshTokenRequestSchema>;\n// Response: TokenResponseSchema\n\n// POST /change-password (Protected)\nexport const PasswordChangeRequestSchema = z.object({\n  currentPassword: z.string(),\n  newPassword: z.string().min(8).max(100),\n}).refine(data => data.currentPassword !== data.newPassword, {\n  message: \"New password must be different from the current password\",\n  path: [\"newPassword\"], // Attach error to newPassword field\n});\nexport type PasswordChangeRequest = z.infer<typeof PasswordChangeRequestSchema>;\n\n// Generic success message response used by some endpoints\nexport const MessageResponseSchema = z.object({\n    message: z.string(),\n});\nexport type MessageResponse = z.infer<typeof MessageResponseSchema>;\n// Response for ChangePassword: MessageResponseSchema\n\n// GET /me (Protected)\n// Request: None\n// Response: UserSchema\n\n// POST /logout (Protected)\n// Request/Response: TBD - Needs handler details. Assume no body/response for now.\n\n// --- MFA Schemas (Placeholders - need model definitions) ---\n\n// POST /mfa/verify\nexport const MfaVerifyRequestSchema = z.object({\n    // Based on UserLoginRequest having mfaCode, maybe just email/password + mfaCode?\n    email: z.string().email(),\n    password: z.string(),\n    mfaCode: z.string(),\n});\nexport type MfaVerifyRequest = z.infer<typeof MfaVerifyRequestSchema>;\n// Response: TokenResponseSchema\n\n// POST /mfa/setup (Protected)\nexport const MfaSetupResponseSchema = z.object({\n    secret: z.string(),\n    qrCode: z.string(), // Typically base64 encoded PNG or SVG data URL\n});\nexport type MfaSetupResponse = z.infer<typeof MfaSetupResponseSchema>;\n// Request: None\n\n// POST /mfa/enable (Protected)\nexport const MfaEnableRequestSchema = z.object({\n    mfaCode: z.string(),\n});\nexport type MfaEnableRequest = z.infer<typeof MfaEnableRequestSchema>;\n// Response: MessageResponseSchema\n\n// POST /mfa/disable (Protected)\nexport const MfaDisableRequestSchema = z.object({\n    // Maybe requires password or MFA code for confirmation?\n    password: z.string().optional(), // Assumption\n    mfaCode: z.string().optional(), // Assumption\n});\nexport type MfaDisableRequest = z.infer<typeof MfaDisableRequestSchema>;\n// Response: MessageResponseSchema\n\n// GET /mfa/status (Protected)\nexport const MfaStatusResponseSchema = z.object({\n    isEnabled: z.boolean(),\n});\nexport type MfaStatusResponse = z.infer<typeof MfaStatusResponseSchema>;\n// Request: None ",
    "import { HttpClient } from '../core/httpClient';\nimport {\n  UserRegistrationRequestSchema,\n  UserRegistrationRequest,\n  UserSchema,\n  User,\n  UserLoginRequestSchema,\n  UserLoginRequest,\n  TokenResponseSchema,\n  TokenResponse,\n  RefreshTokenRequestSchema,\n  RefreshTokenRequest,\n  PasswordChangeRequestSchema,\n  PasswordChangeRequest,\n  MessageResponseSchema,\n  MessageResponse,\n  // Import MFA schemas if implementing those methods\n} from '../types/auth.types';\nimport { ValidationError } from '../core/errors';\n\n/**\n * Handles authentication-related API endpoints.\n */\nexport class AuthAPI {\n  private path = '/auth'; // Base path for auth endpoints\n\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Registers a new user.\n   * @param {UserRegistrationRequest} registrationData - User registration details.\n   * @returns {Promise<User>} The created user details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., user already exists, server error).\n   * @throws {NetworkError} For network issues.\n   * @example\n   * const newUser = await sdk.auth.register({\n   *   username: 'newuser',\n   *   email: 'new@example.com',\n   *   password: 'Str0ngP@ssw0rd!',\n   * });\n   */\n  async register(registrationData: UserRegistrationRequest): Promise<User> {\n    const validationResult = UserRegistrationRequestSchema.safeParse(registrationData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid registration data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<User>(\n        `${this.path}/register`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    // Ensure the response matches the expected schema (optional but recommended)\n    return UserSchema.parse(response);\n  }\n\n  /**\n   * Logs in a user.\n   * @param {UserLoginRequest} loginData - User login credentials.\n   * @returns {Promise<TokenResponse>} Authentication tokens and user info.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {AuthenticationError} For invalid credentials or MFA required but not provided.\n   * @throws {APIError} For other API-level errors.\n   * @throws {NetworkError} For network issues.\n   * @example\n   * const tokens = await sdk.auth.login({\n   *   email: 'user@example.com',\n   *   password: 'password123',\n   * });\n   * // Check tokens.mfaRequired if MFA might be enabled\n   */\n  async login(loginData: UserLoginRequest): Promise<TokenResponse> {\n    const validationResult = UserLoginRequestSchema.safeParse(loginData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid login data', validationResult.error.issues);\n    }\n\n    // Use mfaCode from loginData if present, otherwise call standard login\n    const endpoint = loginData.mfaCode ? `${this.path}/mfa/verify` : `${this.path}/login`;\n\n    const response = await this.httpClient.request<TokenResponse>(\n        endpoint,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    // Ensure the response matches the expected schema\n    return TokenResponseSchema.parse(response);\n  }\n\n  /**\n   * Refreshes authentication tokens using a refresh token.\n   * @param {RefreshTokenRequest} tokenData - The refresh token.\n   * @returns {Promise<TokenResponse>} New authentication tokens.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {AuthenticationError} For invalid or expired refresh token.\n   * @throws {APIError} For other API-level errors.\n   * @throws {NetworkError} For network issues.\n   * @example\n   * const newTokens = await sdk.auth.refresh({ refreshToken: 'old_refresh_token' });\n   */\n  async refresh(tokenData: RefreshTokenRequest): Promise<TokenResponse> {\n    const validationResult = RefreshTokenRequestSchema.safeParse(tokenData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid refresh token data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TokenResponse>(\n        `${this.path}/refresh`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    // Ensure the response matches the expected schema\n    return TokenResponseSchema.parse(response);\n  }\n\n  /**\n   * Changes the currently authenticated user's password.\n   * Requires valid authentication (API Key or JWT) to be configured on the SDK client.\n   * @param {PasswordChangeRequest} passwordData - Current and new password.\n   * @returns {Promise<MessageResponse>} Success message.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {AuthenticationError} If not authenticated or current password incorrect.\n   * @throws {APIError} For other API-level errors.\n   * @throws {NetworkError} For network issues.\n   * @example\n   * await sdk.auth.changePassword({\n   *   currentPassword: 'oldPassword123',\n   *   newPassword: 'NewS3cureP@ssw0rd!',\n   * });\n   */\n  async changePassword(passwordData: PasswordChangeRequest): Promise<MessageResponse> {\n    const validationResult = PasswordChangeRequestSchema.safeParse(passwordData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid password change data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<MessageResponse>(\n        `${this.path}/change-password`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    // Ensure the response matches the expected schema\n    return MessageResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves the profile of the currently authenticated user.\n   * Requires valid authentication (API Key or JWT) to be configured on the SDK client.\n   * @returns {Promise<User>} The authenticated user's profile details.\n   * @throws {AuthenticationError} If not authenticated.\n   * @throws {APIError} For other API-level errors.\n   * @throws {NetworkError} For network issues.\n   * @example\n   * const userProfile = await sdk.auth.getProfile();\n   */\n  async getProfile(): Promise<User> {\n      const response = await this.httpClient.request<User>(`${this.path}/me`, { method: 'GET' });\n      // Ensure the response matches the expected schema\n      return UserSchema.parse(response);\n  }\n\n  // --- Placeholder for Logout ---\n  /**\n   * Logs out the user.\n   * (Implementation details depend on server-side logic - e.g., invalidating refresh token)\n   * Requires valid authentication (API Key or JWT) to be configured on the SDK client.\n   * @returns {Promise<void>} Resolves when logout is complete.\n   * @throws {AuthenticationError} If not authenticated.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   * @example\n   * await sdk.auth.logout();\n   */\n   async logout(): Promise<void> {\n    // The Go handler doesn't seem to take a body or return content.\n    // It might rely on middleware/auth service to invalidate something based on the JWT.\n    await this.httpClient.request<void>(`${this.path}/logout`, {\n        method: 'POST',\n        // No body needed based on handler structure\n    });\n    // No response body expected\n  }\n\n  // --- MFA Methods (To be implemented if needed) ---\n  // async verifyMfa(verificationData: MfaVerifyRequest): Promise<TokenResponse> { ... }\n  // async setupMfa(): Promise<MfaSetupResponse> { ... }\n  // async enableMfa(enableData: MfaEnableRequest): Promise<MessageResponse> { ... }\n  // async disableMfa(disableData: MfaDisableRequest): Promise<MessageResponse> { ... }\n  // async getMfaStatus(): Promise<MfaStatusResponse> { ... }\n} ",
    "import { z } from 'zod';\n\n// Enums based on Go consts\nexport const TransactionStatusSchema = z.enum([\n    'pending',\n    'awaiting_approval',\n    'confirmed',\n    'failed'\n]);\nexport type TransactionStatus = z.infer<typeof TransactionStatusSchema>;\n\nexport const TransactionTypeSchema = z.enum([\n    'transfer',\n    'contract_deploy',\n    'contract_call',\n    'token_transfer',\n    'token_approval',\n    'swap'\n]).nullable().optional(); // Make optional and nullable based on Go struct\nexport type TransactionType = z.infer<typeof TransactionTypeSchema>;\n\nexport const FeePrioritySchema = z.enum(['slow', 'medium', 'fast']).nullable().optional();\nexport type FeePriority = z.infer<typeof FeePrioritySchema>;\n\n// Base Transaction (matches model.TransactionResponse)\nexport const TransactionResponseSchema = z.object({\n  id: z.string().uuid(),\n  walletId: z.string().uuid(),\n  txHash: z.string().optional().nullable(),\n  blockchain: z.string(),\n  status: TransactionStatusSchema,\n  type: TransactionTypeSchema,\n  amount: z.string(), // Amount as string (e.g., Wei)\n  fee: z.string().optional().nullable(), // Fee as string\n  recipient: z.string(),\n  data: z.string().optional().nullable(),\n  metadata: z.record(z.string()).optional().nullable(),\n  createdAt: z.string().datetime().transform((val) => new Date(val)),\n  updatedAt: z.string().datetime().transform((val) => new Date(val)),\n});\nexport type TransactionResponse = z.infer<typeof TransactionResponseSchema>;\n\n// POST /transactions (Create Transaction)\nexport const TransactionCreateRequestSchema = z.object({\n    walletId: z.string().uuid(),\n    recipient: z.string(),\n    amount: z.string(),\n    type: TransactionTypeSchema,\n    data: z.string().optional(),\n    metadata: z.record(z.string()).optional(),\n    chainId: z.string().optional(), // Often needed for EVM tx signing\n    sendMax: z.boolean().optional(),\n});\nexport type TransactionCreateRequest = z.infer<typeof TransactionCreateRequestSchema>;\n// Response: TransactionResponseSchema\n\n// GET /transactions (List Transactions Filter/Query Params)\nexport const TransactionListParamsSchema = z.object({\n    walletId: z.string().uuid().optional(),\n    blockchain: z.string().optional(),\n    status: TransactionStatusSchema.optional(),\n    type: TransactionTypeSchema,\n    fromDate: z.date().optional(), // Pass as Date object, HttpClient needs to format\n    toDate: z.date().optional(),   // Pass as Date object, HttpClient needs to format\n    limit: z.number().int().min(1).max(100).optional(),\n    offset: z.number().int().min(0).optional(),\n});\nexport type TransactionListParams = z.infer<typeof TransactionListParamsSchema>;\n\n// GET /transactions (List Response Body)\nexport const TransactionListResponseSchema = z.object({\n    transactions: z.array(TransactionResponseSchema),\n    totalCount: z.number().int(),\n});\nexport type TransactionListResponse = z.infer<typeof TransactionListResponseSchema>;\n\n// GET /transactions/:id or /transactions/hash/:txHash\n// Response: TransactionResponseSchema\n\n// GET /transactions/wallet/:walletId\n// Params: TransactionListParamsSchema (excluding walletId)\n// Response: TransactionListResponseSchema\n\n// GET /transactions/status\nexport const TransactionStatusQueryParamsSchema = z.object({\n    id: z.string().uuid().optional(),\n    txHash: z.string().optional(),\n}).refine(data => data.id || data.txHash, {\n    message: \"Either 'id' or 'txHash' must be provided.\",\n});\nexport type TransactionStatusQueryParams = z.infer<typeof TransactionStatusQueryParamsSchema>;\n\nexport const TransactionStatusResponseSchema = z.object({\n    id: z.string().uuid(), // ID is always present in Go struct\n    txHash: z.string().optional().nullable(),\n    status: TransactionStatusSchema,\n    type: TransactionTypeSchema,\n    confirmations: z.number().int().nonnegative().optional().nullable(), // Go uses uint64\n    blockNumber: z.number().int().nonnegative().optional().nullable(), // Go uses uint64\n    error: z.string().optional().nullable(),\n});\nexport type TransactionStatusResponse = z.infer<typeof TransactionStatusResponseSchema>;\n\n// POST /transactions/send\n// Mirrors model.SendTransactionRequest more closely now\nexport const SendTransactionRequestSchema = z.object({\n    walletId: z.string().uuid(),\n    recipient: z.string(),\n    amount: z.string(),\n    data: z.string().optional(),\n    gasPrice: z.string().optional(),\n    gasLimit: z.number().int().positive().optional(), // Go uses uint64\n    nonce: z.number().int().nonnegative().optional(),\n    priority: FeePrioritySchema,\n    type: TransactionTypeSchema,\n    metadata: z.record(z.string()).optional(),\n    sendMax: z.boolean().optional(),\n    // txHash: z.string().optional(), // txHash not typically part of send request body\n    // returnRaw: z.boolean().optional(), // Seems like internal flag\n});\nexport type SendTransactionRequest = z.infer<typeof SendTransactionRequestSchema>;\n// Response: TransactionResponseSchema\n\n// POST /transactions/commit-send/:id\n// Path param: id (string uuid)\n// Request Body: None\n// Response: TransactionResponseSchema\n\n// POST /transactions/estimate-fee\nexport const FeeEstimateRequestSchema = z.object({\n    walletId: z.string().uuid(),\n    recipient: z.string(),\n    amount: z.string(),\n    type: TransactionTypeSchema,\n    data: z.string().optional(),\n    blockchain: z.string().optional(), // Likely inferred from walletId\n    priority: FeePrioritySchema,\n});\nexport type FeeEstimateRequest = z.infer<typeof FeeEstimateRequestSchema>;\n\nexport const FeeEstimateResponseSchema = z.object({\n    fee: z.string(),\n    currency: z.string(),\n    gasPrice: z.string().optional().nullable(),\n    gasLimit: z.string().optional().nullable(), // Represent uint64 as string\n    estimatedTime: z.string().optional().nullable(),\n    priority: FeePrioritySchema,\n});\nexport type FeeEstimateResponse = z.infer<typeof FeeEstimateResponseSchema>;\n\n\n// POST /transactions/track\nexport const TrackTransactionRequestSchema = z.object({\n    txHash: z.string(),\n    blockchain: z.string(),\n    walletId: z.string().uuid().optional(),\n    metadata: z.record(z.string()).optional(),\n});\nexport type TrackTransactionRequest = z.infer<typeof TrackTransactionRequestSchema>;\n// Response: TransactionResponseSchema\n\n// POST /transactions/:id/confirm\n// Request/Response TBD ",
    "import { z } from 'zod';\nimport { PaginatedResponseSchema } from './pagination.types';\nimport { TransactionResponseSchema } from './transaction.types'; // Added import\nimport type { TransactionStatusSchema, TransactionTypeSchema, TransactionResponse } from './transaction.types'; // Assuming transaction types will be in their own file\n\n// Enums based on Go consts\nexport const WalletStatusSchema = z.enum(['active', 'inactive', 'frozen']);\nexport type WalletStatus = z.infer<typeof WalletStatusSchema>;\n\n// --- Base Wallet Schemas ---\n\n// API Response (snake_case)\nconst ApiWalletResponseSchema = z.object({\n  id: z.string().uuid(),\n  user_id: z.string().uuid(), // snake_case\n  address: z.string(),\n  blockchain: z.string(),\n  name: z.string(),\n  status: WalletStatusSchema,\n  metadata: z.record(z.string()).optional().nullable(),\n  created_at: z.string(), // snake_case - handle datetime parse in transform\n  updated_at: z.string(), // snake_case - handle datetime parse in transform\n  organization_id: z.string().uuid().optional().nullable(), // snake_case\n});\n\n// SDK Type (camelCase, transformed)\nexport const WalletSchema = ApiWalletResponseSchema.transform(data => ({\n  id: data.id,\n  userId: data.user_id,\n  address: data.address,\n  blockchain: data.blockchain,\n  name: data.name,\n  status: data.status,\n  metadata: data.metadata,\n  createdAt: new Date(data.created_at),\n  updatedAt: new Date(data.updated_at),\n  organizationId: data.organization_id,\n}));\nexport type Wallet = z.infer<typeof WalletSchema>;\n\n// --- Create Wallet Schemas ---\n\n// SDK Input (camelCase)\nconst WalletCreateRequestInputSchema = z.object({\n  blockchain: z.string(),\n  name: z.string(),\n  userId: z.string().uuid().optional(), // Server defaults to actor if omitted\n  organizationId: z.string().uuid(),\n  metadata: z.record(z.string()).optional(),\n});\n\n// API Request Body (snake_case, transformed)\nexport const WalletCreateRequestSchema = WalletCreateRequestInputSchema.transform(data => ({\n  blockchain: data.blockchain,\n  name: data.name,\n  user_id: data.userId,\n  organization_id: data.organizationId,\n  metadata: data.metadata,\n}));\n\nexport type WalletCreateRequest = z.infer<typeof WalletCreateRequestInputSchema>; // Input type remains camelCase\n// Response: WalletSchema\n\n// GET /wallets\nexport const WalletListParamsSchema = z.object({\n    limit: z.number().int().min(1).max(100).optional(),\n    offset: z.number().int().min(0).optional(),\n    // Add other potential filters if needed (e.g., organizationId?)\n});\nexport type WalletListParams = z.infer<typeof WalletListParamsSchema>;\n\nexport const WalletListResponseSchema = z.object({\n    wallets: z.array(WalletSchema),\n    totalCount: z.number().int(),\n});\nexport type WalletListResponse = z.infer<typeof WalletListResponseSchema>;\n\n// GET /wallets/:id\n// Response: WalletSchema\n\n// PUT/PATCH /wallets/:id\nexport const WalletUpdateRequestSchema = z.object({\n  name: z.string().optional(),\n  status: WalletStatusSchema.optional(),\n  metadata: z.record(z.string()).optional(),\n});\nexport type WalletUpdateRequest = z.infer<typeof WalletUpdateRequestSchema>;\n// Response: WalletSchema\n\n// DELETE /wallets/:id\n// No Request body\n// Response: None (204) or MessageResponseSchema\n\n// GET /wallets/:id/balance\n\n// API Response (snake_case)\nconst ApiWalletBalanceResponseSchema = z.object({\n  wallet_id: z.string().uuid(), // snake_case\n  address: z.string(),\n  blockchain: z.string(),\n  balance: z.string(), // Balance as string (e.g., Wei)\n  unit: z.string(), // e.g., \"ETH\", \"MATIC\"\n  updated_at: z.string(), // snake_case - handle datetime parse in transform\n});\n\n// SDK Type (camelCase, transformed)\nexport const WalletBalanceResponseSchema = ApiWalletBalanceResponseSchema.transform(data => ({\n  walletId: data.wallet_id,\n  address: data.address,\n  blockchain: data.blockchain,\n  balance: data.balance,\n  unit: data.unit,\n  updatedAt: new Date(data.updated_at),\n}));\nexport type WalletBalanceResponse = z.infer<typeof WalletBalanceResponseSchema>;\n\n// GET /wallets/:id/transactions\nexport const WalletTransactionListParamsSchema = z.object({\n    limit: z.number().int().min(1).max(100).optional(),\n    offset: z.number().int().min(0).optional(),\n    // Add filters based on model.TransactionFilterRequest?\n    // status: TransactionStatusSchema.optional(),\n    // type: TransactionTypeSchema.optional(),\n    // fromDate: z.date().optional(), // Need transformation from string?\n    // toDate: z.date().optional(),\n});\nexport type WalletTransactionListParams = z.infer<typeof WalletTransactionListParamsSchema>;\n\nexport const WalletTransactionListResponseSchema = z.object({\n    transactions: z.array(TransactionResponseSchema),\n    totalCount: z.number().int(),\n});\nexport type WalletTransactionListResponse = z.infer<typeof WalletTransactionListResponseSchema>;\n\n\n// POST /wallets/:id/sign\nexport const SignDataRequestSchema = z.object({\n    data: z.instanceof(Uint8Array).optional(), // Base64 string might be easier for JSON\n    message: z.string().optional(),\n    // Using zod refine to ensure one is present\n}).refine(data => data.data || data.message, {\n    message: \"Either 'data' (Uint8Array) or 'message' (string) must be provided for signing.\",\n});\nexport type SignDataRequest = z.infer<typeof SignDataRequestSchema>;\n\n// Alternative using base64 string for data\nexport const SignDataRequestBase64Schema = z.object({\n    data: z.string().optional(), // Expect base64 encoded string\n    message: z.string().optional(),\n}).refine(data => data.data || data.message, {\n    message: \"Either 'data' (base64 string) or 'message' (string) must be provided for signing.\",\n});\nexport type SignDataRequestBase64 = z.infer<typeof SignDataRequestBase64Schema>;\n\n\nexport const SignDataResponseSchema = z.object({\n  signature: z.string(),\n  walletId: z.string().uuid(),\n});\nexport type SignDataResponse = z.infer<typeof SignDataResponseSchema>;\n\n// POST /wallets/:id/webhook\n// Assuming WebhookEventType is just a string for now\nexport const WebhookCreateRequestSchema = z.object({\n    // resourceType: z.literal(\"wallet\"), // This will be implicit in the WalletsAPI method\n    // resourceId: z.string().uuid(), // This will be the path parameter\n    eventTypes: z.array(z.string()), // Or z.enum([...]) if types are known and fixed\n    url: z.string().url(),\n    secret: z.string().optional(),\n    active: z.boolean().optional().default(true),\n});\nexport type WebhookCreateRequest = z.infer<typeof WebhookCreateRequestSchema>;\n\nexport const WebhookResponseSchema = z.object({\n    id: z.string().uuid(),\n    resourceType: z.string(),\n    resourceId: z.string().uuid(),\n    eventTypes: z.array(z.string()),\n    url: z.string().url(),\n    active: z.boolean(),\n    createdAt: z.string().datetime().transform((val) => new Date(val)),\n    updatedAt: z.string().datetime().transform((val) => new Date(val)),\n});\nexport type WebhookResponse = z.infer<typeof WebhookResponseSchema>;\n\n// GET /wallets/:id/stats\nexport const WalletStatsResponseSchema = z.object({\n    walletId: z.string().uuid(),\n    address: z.string(),\n    blockchain: z.string(),\n    // currentBalance: z.bigint().transform(val => val.toString()), // Zod doesn't support bigint directly in standard JSON parsing\n    currentBalance: z.string(), // Assuming server sends as string or number that fits JS number\n    transactionCount: z.number().int(),\n    lastActivity: z.string().datetime().transform((val) => new Date(val)),\n});\nexport type WalletStatsResponse = z.infer<typeof WalletStatsResponseSchema>; ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport {\n    WalletSchema,\n    Wallet,\n    WalletCreateRequestSchema,\n    WalletCreateRequest,\n    WalletListParamsSchema,\n    WalletListParams,\n    WalletListResponseSchema,\n    WalletListResponse,\n    WalletUpdateRequestSchema,\n    WalletUpdateRequest,\n    WalletBalanceResponseSchema,\n    WalletBalanceResponse,\n    WalletTransactionListParamsSchema,\n    WalletTransactionListParams,\n    WalletTransactionListResponseSchema,\n    WalletTransactionListResponse,\n    SignDataRequestBase64Schema, // Using Base64 version for simplicity\n    SignDataRequestBase64,\n    SignDataResponseSchema,\n    SignDataResponse,\n    WebhookCreateRequestSchema,\n    WebhookCreateRequest,\n    WebhookResponseSchema,\n    WebhookResponse,\n    WalletStatsResponseSchema,\n    WalletStatsResponse,\n    WalletResponseSchema,\n    WalletResponse\n} from '../types/wallet.types';\nimport type { MessageResponseSchema, MessageResponse } from '../types/auth.types';\nimport { Buffer } from 'buffer'; // Needed for Base64 encoding\nimport type { SDKOptions } from '../client';\nimport { Paginated, PaginatedResponseSchema } from '../types/pagination.types';\n\n/**\n * Handles wallet-related API endpoints.\n */\nexport class WalletsAPI {\n  private path = '/wallets';\n\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Creates a new blockchain wallet.\n   *\n   * @async\n   * @function create\n   * @memberof WalletsAPI\n   * @param {WalletCreateRequest} walletData - Details for the new wallet (name, type, metadata).\n   * @returns {Promise<Wallet>} A promise that resolves with the details of the created wallet.\n   * @throws {ValidationError} If the input `walletData` is invalid (e.g., missing name, invalid type).\n   * @throws {APIError} If the API returns an error (e.g., authentication failure, internal server error).\n   * @throws {NetworkError} If there's a network issue connecting to the API.\n   *\n   * @example\n   * ```typescript\n   * try {\n   *   const newWallet = await sdk.wallets.create({\n   *     name: 'My First HD Wallet',\n   *     type: 'HD'\n   *   });\n   *   console.log('Wallet created:', newWallet.id);\n   * } catch (error) {\n   *   console.error('Failed to create wallet:', error);\n   * }\n   * ```\n   */\n  async create(walletData: WalletCreateRequest): Promise<Wallet> {\n    const validationResult = WalletCreateRequestSchema.safeParse(walletData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid wallet creation data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<Wallet>(\n        `${this.path}`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return WalletSchema.parse(response);\n  }\n\n  /**\n   * Lists wallets accessible to the authenticated user.\n   * Requires authentication.\n   * @param {WalletListParams} [params] - Optional pagination parameters (limit, offset).\n   * @returns {Promise<WalletListResponse>} A list of wallets and the total count.\n   * @throws {ValidationError} If params validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async list(params?: WalletListParams): Promise<WalletListResponse> {\n    const validatedParams = params ? WalletListParamsSchema.parse(params) : {};\n\n    const response = await this.httpClient.request<WalletListResponse>(\n        `${this.path}`,\n        {\n            method: 'GET',\n            queryParams: validatedParams,\n        }\n    );\n    return WalletListResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves details for a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet to retrieve.\n   * @returns {Promise<Wallet>} Wallet details.\n   * @throws {APIError} For API-level errors (e.g., not found, permission denied).\n   * @throws {NetworkError} For network issues.\n   */\n  async getById(walletId: string): Promise<Wallet> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const response = await this.httpClient.request<Wallet>(`${this.path}/${walletId}`, { method: 'GET' });\n    return WalletSchema.parse(response);\n  }\n\n  /**\n   * Updates a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet to update.\n   * @param {WalletUpdateRequest} updateData - Fields to update.\n   * @returns {Promise<Wallet>} The updated wallet details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async update(walletId: string, updateData: WalletUpdateRequest): Promise<Wallet> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const validationResult = WalletUpdateRequestSchema.safeParse(updateData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid wallet update data', validationResult.error.issues);\n    }\n    if (Object.keys(validationResult.data).length === 0) {\n        throw new ValidationError('At least one field must be provided for update');\n    }\n\n    // Using PATCH as it's more appropriate for partial updates\n    const response = await this.httpClient.request<Wallet>(\n        `${this.path}/${walletId}`,\n        {\n            method: 'PATCH',\n            body: validationResult.data,\n        }\n    );\n    return WalletSchema.parse(response);\n  }\n\n  /**\n   * Deletes a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet to delete.\n   * @returns {Promise<void>} Resolves on successful deletion.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async delete(walletId: string): Promise<void> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    await this.httpClient.request<void>(`${this.path}/${walletId}`, { method: 'DELETE' });\n    // Expecting 204 No Content or similar\n  }\n\n  /**\n   * Gets the balance for a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet.\n   * @returns {Promise<WalletBalanceResponse>} Wallet balance details.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async getBalance(walletId: string): Promise<WalletBalanceResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const response = await this.httpClient.request<WalletBalanceResponse>(`${this.path}/${walletId}/balance`, { method: 'GET' });\n    return WalletBalanceResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists transactions associated with a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet.\n   * @param {WalletTransactionListParams} [params] - Optional pagination and filtering parameters.\n   * @returns {Promise<WalletTransactionListResponse>} A list of transactions and the total count.\n   * @throws {ValidationError} If params validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async listTransactions(walletId: string, params?: WalletTransactionListParams): Promise<WalletTransactionListResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const validatedParams = params ? WalletTransactionListParamsSchema.parse(params) : {};\n\n    const response = await this.httpClient.request<WalletTransactionListResponse>(\n        `${this.path}/${walletId}/transactions`,\n        {\n            method: 'GET',\n            queryParams: validatedParams,\n        }\n    );\n    return WalletTransactionListResponseSchema.parse(response);\n  }\n\n  /**\n   * Signs data using the wallet's private key.\n   * Requires authentication.\n   * Accepts either a raw message string or a base64 encoded data string.\n   * @param {string} walletId - The UUID of the wallet to sign with.\n   * @param {SignDataRequestBase64} signRequest - The data or message to sign.\n   * @returns {Promise<SignDataResponse>} The signature and wallet ID.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., wallet not found, signing error).\n   * @throws {NetworkError} For network issues.\n   */\n  async signData(walletId: string, signRequest: SignDataRequestBase64): Promise<SignDataResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const validationResult = SignDataRequestBase64Schema.safeParse(signRequest);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid signing request data', validationResult.error.issues);\n    }\n\n    // The Go handler expects `data` as []byte or `message` as string.\n    // We'll send the base64 data string as `data` if provided, otherwise send `message`.\n    // Server side needs to handle decoding base64 if `data` is received.\n    const bodyToSend: { data?: string; message?: string } = {};\n    if (validationResult.data.data) {\n        bodyToSend.data = validationResult.data.data; // Send as base64 string\n    } else {\n        bodyToSend.message = validationResult.data.message;\n    }\n\n    const response = await this.httpClient.request<SignDataResponse>(\n        `${this.path}/${walletId}/sign`,\n        {\n            method: 'POST',\n            body: bodyToSend,\n        }\n    );\n    return SignDataResponseSchema.parse(response);\n  }\n\n   /**\n    * Signs a message string using the wallet's private key.\n    * Convenience method for signing human-readable strings.\n    * Requires authentication.\n    * @param {string} walletId - The UUID of the wallet to sign with.\n    * @param {string} message - The message string to sign.\n    * @returns {Promise<SignDataResponse>} The signature and wallet ID.\n    * @throws {ValidationError} If input validation fails.\n    * @throws {APIError} For API-level errors.\n    * @throws {NetworkError} For network issues.\n    */\n    async signMessage(walletId: string, message: string): Promise<SignDataResponse> {\n        if (!message) throw new ValidationError('Message is required for signing');\n        return this.signData(walletId, { message });\n    }\n\n    /**\n     * Signs raw byte data using the wallet's private key.\n     * Requires authentication.\n     * @param {string} walletId - The UUID of the wallet to sign with.\n     * @param {Uint8Array} data - The raw byte data to sign.\n     * @returns {Promise<SignDataResponse>} The signature and wallet ID.\n     * @throws {ValidationError} If input validation fails.\n     * @throws {APIError} For API-level errors.\n     * @throws {NetworkError} For network issues.\n     */\n    async signRawData(walletId: string, data: Uint8Array): Promise<SignDataResponse> {\n        if (!data || data.length === 0) throw new ValidationError('Data is required for signing');\n        // Convert Uint8Array to base64 string for JSON transport\n        const base64Data = Buffer.from(data).toString('base64');\n        return this.signData(walletId, { data: base64Data });\n    }\n\n  /**\n   * Registers a webhook for events related to a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet.\n   * @param {WebhookCreateRequest} webhookData - Webhook configuration.\n   * @returns {Promise<WebhookResponse>} The created webhook details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async registerWebhook(walletId: string, webhookData: WebhookCreateRequest): Promise<WebhookResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const validationResult = WebhookCreateRequestSchema.safeParse(webhookData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid webhook creation data', validationResult.error.issues);\n    }\n\n    // The handler expects resourceType and resourceId implicitly from the path\n    const bodyToSend = {\n        eventTypes: validationResult.data.eventTypes,\n        url: validationResult.data.url,\n        secret: validationResult.data.secret,\n        active: validationResult.data.active,\n    };\n\n    const response = await this.httpClient.request<WebhookResponse>(\n        `${this.path}/${walletId}/webhook`,\n        {\n            method: 'POST',\n            body: bodyToSend,\n        }\n    );\n    return WebhookResponseSchema.parse(response);\n  }\n\n  /**\n   * Gets statistics for a specific wallet.\n   * Requires authentication.\n   * @param {string} walletId - The UUID of the wallet.\n   * @returns {Promise<WalletStatsResponse>} Wallet statistics.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async getStats(walletId: string): Promise<WalletStatsResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    const response = await this.httpClient.request<WalletStatsResponse>(`${this.path}/${walletId}/stats`, { method: 'GET' });\n    return WalletStatsResponseSchema.parse(response);\n  }\n\n  // Note: Superadmin ListAllWallets endpoint is not included here as it requires special permissions.\n  // It could be added to a separate SuperAdminAPI class if needed.\n} ",
    "/**\n * Helper function to format query parameters for HTTP requests.\n * Converts Date objects to ISO strings and removes undefined/null values.\n * @param {Record<string, any>} params - The parameters object.\n * @returns {Record<string, string | number | boolean>} Formatted parameters.\n */\nexport function formatQueryParams(params: Record<string, any>): Record<string, string | number | boolean> {\n    const formatted: Record<string, string | number | boolean> = {};\n    for (const key in params) {\n        if (params[key] instanceof Date) {\n            formatted[key] = params[key].toISOString();\n        } else if (params[key] !== undefined && params[key] !== null) {\n            // Only include defined, non-null values\n            formatted[key] = params[key];\n        }\n    }\n    return formatted;\n}\n\n// Add other utility functions here as needed ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport { formatQueryParams } from '../core/utils';\nimport {\n    TransactionCreateRequestSchema,\n    TransactionCreateRequest,\n    TransactionResponseSchema,\n    TransactionResponse,\n    TransactionListParamsSchema,\n    TransactionListParams,\n    TransactionListResponseSchema,\n    TransactionListResponse,\n    TransactionStatusQueryParamsSchema,\n    TransactionStatusQueryParams,\n    TransactionStatusResponseSchema,\n    TransactionStatusResponse,\n    SendTransactionRequestSchema,\n    SendTransactionRequest,\n    FeeEstimateRequestSchema,\n    FeeEstimateRequest,\n    FeeEstimateResponseSchema,\n    FeeEstimateResponse,\n    TrackTransactionRequestSchema,\n    TrackTransactionRequest\n} from '../types/transaction.types';\n\n/**\n * Handles transaction-related API endpoints.\n */\nexport class TransactionsAPI {\n  private path = '/transactions';\n\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Creates a new transaction record in the system (does not send to blockchain).\n   * Requires `transaction:create` permission.\n   * @param {TransactionCreateRequest} txData - Transaction details.\n   * @returns {Promise<TransactionResponse>} The created transaction record.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., permission denied, invalid wallet).\n   * @throws {NetworkError} For network issues.\n   */\n  async create(txData: TransactionCreateRequest): Promise<TransactionResponse> {\n    const validationResult = TransactionCreateRequestSchema.safeParse(txData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid transaction creation data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionResponse>(\n        `${this.path}`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists transactions based on specified filters.\n   * Requires `transaction:read` permission.\n   * @param {TransactionListParams} [params] - Filtering and pagination parameters.\n   * @returns {Promise<TransactionListResponse>} A list of transactions and the total count.\n   * @throws {ValidationError} If params validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async list(params?: TransactionListParams): Promise<TransactionListResponse> {\n    const validationResult = TransactionListParamsSchema.safeParse(params || {});\n     if (!validationResult.success) {\n        throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n    }\n    const formattedParams = formatQueryParams(validationResult.data);\n\n    const response = await this.httpClient.request<TransactionListResponse>(\n        `${this.path}`,\n        {\n            method: 'GET',\n            queryParams: formattedParams,\n        }\n    );\n    return TransactionListResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves a transaction by its internal system ID.\n   * Requires `transaction:read` permission.\n   * @param {string} transactionId - The UUID of the transaction.\n   * @returns {Promise<TransactionResponse>} Transaction details.\n   * @throws {ValidationError} If ID is missing.\n   * @throws {APIError} For API-level errors (e.g., not found).\n   * @throws {NetworkError} For network issues.\n   */\n  async getById(transactionId: string): Promise<TransactionResponse> {\n    if (!transactionId) throw new ValidationError('Transaction ID is required');\n    const response = await this.httpClient.request<TransactionResponse>(`${this.path}/${transactionId}`, { method: 'GET' });\n    return TransactionResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves a transaction by its blockchain hash.\n   * Requires `transaction:read` permission.\n   * @param {string} txHash - The blockchain transaction hash.\n   * @returns {Promise<TransactionResponse>} Transaction details.\n   * @throws {ValidationError} If hash is missing.\n   * @throws {APIError} For API-level errors (e.g., not found).\n   * @throws {NetworkError} For network issues.\n   */\n  async getByHash(txHash: string): Promise<TransactionResponse> {\n    if (!txHash) throw new ValidationError('Transaction hash is required');\n    const response = await this.httpClient.request<TransactionResponse>(`${this.path}/hash/${txHash}`, { method: 'GET' });\n    return TransactionResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists transactions associated with a specific wallet.\n   * Requires `wallet:read` permission for the specified wallet.\n   * @param {string} walletId - The UUID of the wallet.\n   * @param {Omit<TransactionListParams, 'walletId'>} [params] - Filtering and pagination parameters (excluding walletId).\n   * @returns {Promise<TransactionListResponse>} A list of transactions and the total count.\n   * @throws {ValidationError} If walletId is missing or params validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n   async listByWallet(walletId: string, params?: Omit<TransactionListParams, 'walletId'>): Promise<TransactionListResponse> {\n    if (!walletId) throw new ValidationError('Wallet ID is required');\n    // Validate params excluding walletId\n    const validationResult = TransactionListParamsSchema.omit({ walletId: true }).safeParse(params || {});\n     if (!validationResult.success) {\n        throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n    }\n    const formattedParams = formatQueryParams(validationResult.data);\n\n    const response = await this.httpClient.request<TransactionListResponse>(\n        `${this.path}/wallet/${walletId}`,\n        {\n            method: 'GET',\n            queryParams: formattedParams,\n        }\n    );\n    return TransactionListResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves the status of a transaction by its ID or hash.\n   * Requires `transaction:read` permission.\n   * @param {TransactionStatusQueryParams} params - Either the transaction ID or hash.\n   * @returns {Promise<TransactionStatusResponse>} Transaction status details.\n   * @throws {ValidationError} If params validation fails (neither id nor txHash provided).\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async getStatus(params: TransactionStatusQueryParams): Promise<TransactionStatusResponse> {\n    const validationResult = TransactionStatusQueryParamsSchema.safeParse(params);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid status query parameters', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionStatusResponse>(\n        `${this.path}/status`,\n        {\n            method: 'GET',\n            queryParams: validationResult.data, // Send { id: '...' } or { txHash: '...' }\n        }\n    );\n    return TransactionStatusResponseSchema.parse(response);\n  }\n\n  /**\n   * Initiates the process to send (broadcast) a transaction.\n   * This may involve approval workflows depending on permissions and limits.\n   * Requires transaction send permission.\n   * @param {SendTransactionRequest} sendData - Details of the transaction to send.\n   * @returns {Promise<TransactionResponse>} The transaction record, potentially updated status (e.g., pending, awaiting_approval).\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., permission denied, limits exceeded).\n   * @throws {NetworkError} For network issues.\n   */\n  async send(sendData: SendTransactionRequest): Promise<TransactionResponse> {\n    const validationResult = SendTransactionRequestSchema.safeParse(sendData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid send transaction data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionResponse>(\n        `${this.path}/send`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionResponseSchema.parse(response);\n  }\n\n  /**\n   * Sends/Broadcasts a previously created transaction record by its ID.\n   * Requires transaction send permission.\n   * @param {string} transactionId - The UUID of the transaction record to send.\n   * @returns {Promise<TransactionResponse>} The transaction record with updated status.\n   * @throws {ValidationError} If ID is missing.\n   * @throws {APIError} For API-level errors (e.g., not found, already sent, permission denied).\n   * @throws {NetworkError} For network issues.\n   */\n  async commitSend(transactionId: string): Promise<TransactionResponse> {\n    if (!transactionId) throw new ValidationError('Transaction ID is required');\n\n    const response = await this.httpClient.request<TransactionResponse>(\n        `${this.path}/commit-send/${transactionId}`,\n        {\n            method: 'POST',\n            // No body needed for this endpoint\n        }\n    );\n    return TransactionResponseSchema.parse(response);\n  }\n\n  /**\n   * Estimates the fee for a potential transaction.\n   * Requires `transaction:read` permission.\n   * @param {FeeEstimateRequest} estimateData - Details of the transaction to estimate fee for.\n   * @returns {Promise<FeeEstimateResponse>} Estimated fee details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async estimateFee(estimateData: FeeEstimateRequest): Promise<FeeEstimateResponse> {\n    const validationResult = FeeEstimateRequestSchema.safeParse(estimateData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid fee estimation data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<FeeEstimateResponse>(\n        `${this.path}/estimate-fee`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return FeeEstimateResponseSchema.parse(response);\n  }\n\n  /**\n   * Tracks an externally created transaction by its hash.\n   * Requires `transaction:read` permission.\n   * @param {TrackTransactionRequest} trackData - Transaction hash and blockchain details.\n   * @returns {Promise<TransactionResponse>} The newly tracked transaction record.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async track(trackData: TrackTransactionRequest): Promise<TransactionResponse> {\n    const validationResult = TrackTransactionRequestSchema.safeParse(trackData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid track transaction data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionResponse>(\n        `${this.path}/track`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionResponseSchema.parse(response);\n  }\n\n  // --- Placeholder for Confirm Transaction ---\n  /**\n   * Confirms a transaction (Purpose TBD - might relate to approvals).\n   * Requires `transaction:approve` permission.\n   * @param {string} transactionId - The UUID of the transaction to confirm.\n   * @returns {Promise<any>} Response details TBD.\n   * @throws {ValidationError} If ID is missing.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async confirm(transactionId: string): Promise<any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n    if (!transactionId) throw new ValidationError('Transaction ID is required');\n    // Implementation depends on the actual request/response of this endpoint\n    return this.httpClient.request<any>(\n        `${this.path}/${transactionId}/confirm`,\n        {\n            method: 'POST',\n            // Request body? Response type?\n        }\n    );\n  }\n} ",
    "import { z } from 'zod';\n\n// Enums based on Go consts\nexport const ApprovalStatusSchema = z.enum([\n    'pending',\n    'approved',\n    'rejected',\n    'expired'\n]);\nexport type ApprovalStatus = z.infer<typeof ApprovalStatusSchema>;\n\nexport const ApprovalReasonSchema = z.enum([\n    'high_value',\n    'daily_limit_exceeded',\n    'suspicious_activity',\n    'new_recipient'\n]).nullable().optional(); // Nullable/optional as it might not always be present\nexport type ApprovalReason = z.infer<typeof ApprovalReasonSchema>;\n\n// Base Approval Response (matches model.TransactionApprovalResponse)\nexport const TransactionApprovalResponseSchema = z.object({\n  id: z.string().uuid(),\n  transactionId: z.string().uuid(),\n  status: ApprovalStatusSchema,\n  reason: ApprovalReasonSchema,\n  requestedBy: z.string().uuid(), // Assuming this is a User ID\n  approvedBy: z.string().uuid().optional().nullable(), // Assuming User ID\n  requestedAt: z.string().datetime().transform((val) => new Date(val)),\n  respondedAt: z.string().datetime().transform((val) => new Date(val)).optional().nullable(),\n  expiresAt: z.string().datetime().transform((val) => new Date(val)),\n  notes: z.string().optional().nullable(),\n  createdAt: z.string().datetime().transform((val) => new Date(val)),\n  updatedAt: z.string().datetime().transform((val) => new Date(val)),\n});\nexport type TransactionApprovalResponse = z.infer<typeof TransactionApprovalResponseSchema>;\n\n// GET /transaction-approvals (List Pending)\nexport const ApprovalListParamsSchema = z.object({\n    limit: z.number().int().min(1).max(100).optional(),\n    offset: z.number().int().min(0).optional(),\n});\nexport type ApprovalListParams = z.infer<typeof ApprovalListParamsSchema>;\n\n// Generic Paginated Response structure (can be moved to common.types.ts later)\nexport const PaginatedApprovalResponseSchema = z.object({\n    data: z.array(TransactionApprovalResponseSchema),\n    totalCount: z.number().int(),\n    limit: z.number().int(),\n    offset: z.number().int(),\n});\nexport type PaginatedApprovalResponse = z.infer<typeof PaginatedApprovalResponseSchema>;\n\n// GET /transaction-approvals/:id\n// Response: TransactionApprovalResponseSchema\n\n// GET /transaction-approvals/transaction/:transactionId\n// Response: z.array(TransactionApprovalResponseSchema)\n\n// POST /transaction-approvals/approve\nexport const ApproveTransactionRequestSchema = z.object({\n    approvalId: z.string().uuid(),\n    notes: z.string().optional(),\n});\nexport type ApproveTransactionRequest = z.infer<typeof ApproveTransactionRequestSchema>;\n// Response: TransactionApprovalResponseSchema\n\n// POST /transaction-approvals/reject\nexport const RejectTransactionRequestSchema = z.object({\n    approvalId: z.string().uuid(),\n    reason: z.string().optional(), // Different from notes in approve?\n});\nexport type RejectTransactionRequest = z.infer<typeof RejectTransactionRequestSchema>;\n// Response: TransactionApprovalResponseSchema\n\n// POST /transaction-approvals/request\nexport const RequestApprovalRequestSchema = z.object({\n    transactionId: z.string().uuid(),\n    notes: z.string().optional(),\n});\nexport type RequestApprovalRequest = z.infer<typeof RequestApprovalRequestSchema>;\n// Response: TransactionApprovalResponseSchema ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport { z } from 'zod';\nimport {\n    ApprovalListParamsSchema,\n    ApprovalListParams,\n    PaginatedApprovalResponseSchema,\n    PaginatedApprovalResponse,\n    TransactionApprovalResponseSchema,\n    TransactionApprovalResponse,\n    ApproveTransactionRequestSchema,\n    ApproveTransactionRequest,\n    RejectTransactionRequestSchema,\n    RejectTransactionRequest,\n    RequestApprovalRequestSchema,\n    RequestApprovalRequest\n} from '../types/transactionApproval.types';\n\n/**\n * Handles transaction approval related API endpoints.\n */\nexport class TransactionApprovalsAPI {\n  private path = '/transaction-approvals';\n\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Lists pending transaction approvals for the authenticated user/organization.\n   * Requires `transaction:approve` permission.\n   * @param {ApprovalListParams} [params] - Pagination parameters.\n   * @returns {Promise<PaginatedApprovalResponse>} Paginated list of pending approvals.\n   * @throws {ValidationError} If params validation fails.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async listPending(params?: ApprovalListParams): Promise<PaginatedApprovalResponse> {\n    const validationResult = ApprovalListParamsSchema.safeParse(params || {});\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<PaginatedApprovalResponse>(\n        `${this.path}`,\n        {\n            method: 'GET',\n            queryParams: validationResult.data,\n        }\n    );\n    // The actual response might be PaginatedResponse { data: Approval[] }, ensure schema matches API\n    return PaginatedApprovalResponseSchema.parse(response);\n  }\n\n  /**\n   * Retrieves details for a specific transaction approval request.\n   * Requires `transaction:approve` permission.\n   * @param {string} approvalId - The UUID of the approval request.\n   * @returns {Promise<TransactionApprovalResponse>} Approval details.\n   * @throws {ValidationError} If ID is missing.\n   * @throws {APIError} For API-level errors (e.g., not found, permission denied).\n   * @throws {NetworkError} For network issues.\n   */\n  async getById(approvalId: string): Promise<TransactionApprovalResponse> {\n    if (!approvalId) throw new ValidationError('Approval ID is required');\n    const response = await this.httpClient.request<TransactionApprovalResponse>(`${this.path}/${approvalId}`, { method: 'GET' });\n    return TransactionApprovalResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists all approval requests (pending, approved, rejected) for a specific transaction.\n   * Requires `transaction:read` permission.\n   * @param {string} transactionId - The UUID of the transaction.\n   * @returns {Promise<TransactionApprovalResponse[]>} List of approval details.\n   * @throws {ValidationError} If ID is missing.\n   * @throws {APIError} For API-level errors.\n   * @throws {NetworkError} For network issues.\n   */\n  async listByTransaction(transactionId: string): Promise<TransactionApprovalResponse[]> {\n    if (!transactionId) throw new ValidationError('Transaction ID is required');\n    // The API returns a direct array, not a paginated response\n    const response = await this.httpClient.request<TransactionApprovalResponse[]>(`${this.path}/transaction/${transactionId}`, { method: 'GET' });\n    // Validate each item in the array\n    return z.array(TransactionApprovalResponseSchema).parse(response);\n  }\n\n  /**\n   * Approves a pending transaction approval request.\n   * Requires `transaction:approve` permission.\n   * @param {ApproveTransactionRequest} approvalData - Approval ID and optional notes.\n   * @returns {Promise<TransactionApprovalResponse>} The updated approval details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., not found, already actioned, permission denied).\n   * @throws {NetworkError} For network issues.\n   */\n  async approve(approvalData: ApproveTransactionRequest): Promise<TransactionApprovalResponse> {\n    const validationResult = ApproveTransactionRequestSchema.safeParse(approvalData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid approval data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionApprovalResponse>(\n        `${this.path}/approve`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionApprovalResponseSchema.parse(response);\n  }\n\n  /**\n   * Rejects a pending transaction approval request.\n   * Requires `transaction:approve` permission.\n   * @param {RejectTransactionRequest} rejectionData - Approval ID and optional reason.\n   * @returns {Promise<TransactionApprovalResponse>} The updated approval details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., not found, already actioned, permission denied).\n   * @throws {NetworkError} For network issues.\n   */\n  async reject(rejectionData: RejectTransactionRequest): Promise<TransactionApprovalResponse> {\n    const validationResult = RejectTransactionRequestSchema.safeParse(rejectionData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid rejection data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionApprovalResponse>(\n        `${this.path}/reject`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionApprovalResponseSchema.parse(response);\n  }\n\n  /**\n   * Manually requests approval for an existing transaction.\n   * Requires `transaction:create` permission.\n   * @param {RequestApprovalRequest} requestData - Transaction ID and optional notes.\n   * @returns {Promise<TransactionApprovalResponse>} The newly created approval request details.\n   * @throws {ValidationError} If input validation fails.\n   * @throws {APIError} For API-level errors (e.g., transaction not found, already approved/rejected, approval not required).\n   * @throws {NetworkError} For network issues.\n   */\n  async request(requestData: RequestApprovalRequest): Promise<TransactionApprovalResponse> {\n    const validationResult = RequestApprovalRequestSchema.safeParse(requestData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid approval request data', validationResult.error.issues);\n    }\n\n    const response = await this.httpClient.request<TransactionApprovalResponse>(\n        `${this.path}/request`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionApprovalResponseSchema.parse(response);\n  }\n} ",
    "import { z } from 'zod';\n\n// Enums based on Go consts\nexport const ResourceTypeSchema = z.enum([\n    'wallet',\n    'transaction',\n    'batch',\n    'user',\n    'role',\n    'permission',\n    'organization_balance_wallet',\n    'transaction_approval',\n    'contract_deployment'\n]);\nexport type ResourceType = z.infer<typeof ResourceTypeSchema>;\n\nexport const PermissionActionSchema = z.enum([\n    'read',\n    'create',\n    'update',\n    'delete',\n    'approve',\n    'cancel',\n    'process',\n    'assign',\n    'revoke',\n    'list',\n    'execute',\n    'deploy',\n    'administer',\n    'use_for_deployment'\n]);\nexport type PermissionAction = z.infer<typeof PermissionActionSchema>;\n\n// Base Permission Response (matches model.PermissionResponse)\nexport const PermissionResponseSchema = z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    description: z.string().optional().nullable(),\n    resourceType: ResourceTypeSchema,\n    action: PermissionActionSchema,\n    isSystem: z.boolean(),\n});\nexport type PermissionResponse = z.infer<typeof PermissionResponseSchema>;\n\n// Base Role Response (matches model.RoleResponse)\nexport const RoleResponseSchema = z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    description: z.string().optional().nullable(),\n    isSystem: z.boolean(),\n    createdAt: z.string().datetime().transform(val => new Date(val)),\n    updatedAt: z.string().datetime().transform(val => new Date(val)),\n    permissions: z.array(PermissionResponseSchema).optional().nullable(), // Permissions included\n});\nexport type RoleResponse = z.infer<typeof RoleResponseSchema>;\n\n// --- Roles --- (/roles)\n\n// GET /roles\n// Response: z.array(RoleResponseSchema)\n\n// POST /roles & PUT /roles/:id\nexport const RoleRequestSchema = z.object({\n    name: z.string().min(3).max(100),\n    description: z.string().optional(),\n    permissions: z.array(z.string().uuid()).optional(), // Array of Permission IDs\n});\nexport type RoleRequest = z.infer<typeof RoleRequestSchema>;\n// Response: RoleResponseSchema\n\n// GET /roles/:id\n// Response: RoleResponseSchema\n\n// DELETE /roles/:id\n// Response: None (204) or MessageResponse\n\n// --- Permissions --- (/permissions)\n\n// GET /permissions\n// Response: z.array(PermissionResponseSchema)\n\n// GET /permissions/resource/:type\n// Path Param: type (ResourceTypeSchema)\n// Response: z.array(PermissionResponseSchema)\n\n// --- User Roles --- (/user-roles)\n\n// GET /user-roles/:userId\n// Response: z.array(RoleResponseSchema) (based on UserRoleResponse structure)\n\n// POST /user-roles\nexport const AssignRoleRequestSchema = z.object({\n    userId: z.string().uuid(),\n    roleId: z.string().uuid(),\n    // createdBy: z.string().uuid().optional(), // Usually handled server-side\n});\nexport type AssignRoleRequest = z.infer<typeof AssignRoleRequestSchema>;\n// Response: UserRoleSchema? Or just 201/204? Assuming 204 for now.\n\n// DELETE /user-roles/:userId/:roleId\n// Response: None (204) or MessageResponse\n\n// --- User Permissions --- (/user-permissions)\n\n// GET /user-permissions/:userId\n// Response: z.array(PermissionResponseSchema) (based on UserPermissionResponse structure)\n\n// POST /user-permissions\nexport const AssignPermissionRequestSchema = z.object({\n    userId: z.string().uuid(),\n    permissionId: z.string().uuid(),\n    granted: z.boolean().optional().default(true),\n    // createdBy: z.string().uuid().optional(),\n});\nexport type AssignPermissionRequest = z.infer<typeof AssignPermissionRequestSchema>;\n// Response: DirectPermissionSchema? Or just 201/204? Assuming 204.\n\n// DELETE /user-permissions/:userId/:permissionId\n// Response: None (204) or MessageResponse\n\n// --- Resource Permissions --- (/resource-permissions)\n\n// POST /resource-permissions\nexport const AssignResourcePermissionRequestSchema = z.object({\n    userId: z.string().uuid(),\n    resourceType: ResourceTypeSchema,\n    resourceId: z.string(), // Can be UUID or other ID depending on resourceType\n    permissionId: z.string().uuid(),\n    granted: z.boolean().optional().default(true),\n    // createdBy: z.string().uuid().optional(),\n});\nexport type AssignResourcePermissionRequest = z.infer<typeof AssignResourcePermissionRequestSchema>;\n// Response: ResourcePermissionSchema? Or just 201/204? Assuming 204.\n\n// DELETE /resource-permissions/:userId/:resourceType/:resourceId/:permissionId\n// Response: None (204) or MessageResponse\n\n// --- Organization Roles --- (/organization-roles)\n\n// GET /organization-roles/:organizationId/:userId\n// Response: z.array(RoleResponseSchema)? Need confirmation.\n\n// POST /organization-roles\nexport const AssignOrgRoleRequestSchema = z.object({\n    organizationId: z.string().uuid(),\n    userId: z.string().uuid(),\n    roleId: z.string().uuid(),\n    // createdBy: z.string().uuid().optional(),\n});\nexport type AssignOrgRoleRequest = z.infer<typeof AssignOrgRoleRequestSchema>;\n// Response: OrganizationRoleSchema? Or 201/204? Assuming 204.\n\n// DELETE /organization-roles/:organizationId/:userId/:roleId\n// Response: None (204) or MessageResponse\n\n// --- Transaction Limits --- (/transaction-limits)\n\n// Base Transaction Limit (matches model.TransactionLimit)\nexport const TransactionLimitSchema = z.object({\n    id: z.string().uuid().optional(),\n    roleId: z.string().uuid(),\n    blockchain: z.string(),\n    maxAmount: z.string(), // String for large numbers\n    dailyLimit: z.string(),\n    monthlyLimit: z.string(),\n    requireApproval: z.boolean(),\n    approvalThreshold: z.number().int(), // Assuming int fits JS number range\n    createdAt: z.string().datetime().transform(val => new Date(val)).optional(),\n    updatedAt: z.string().datetime().transform(val => new Date(val)).optional(),\n    createdBy: z.string().uuid().optional().nullable(),\n});\nexport type TransactionLimit = z.infer<typeof TransactionLimitSchema>;\n\n// POST /transaction-limits\nexport const TransactionLimitRequestSchema = z.object({\n    roleId: z.string().uuid(),\n    blockchain: z.string(),\n    maxAmount: z.string(),\n    dailyLimit: z.string(),\n    monthlyLimit: z.string(),\n    requireApproval: z.boolean().optional().default(false),\n    approvalThreshold: z.number().int().optional().default(0),\n    // createdBy: z.string().uuid().optional(),\n});\nexport type TransactionLimitRequest = z.infer<typeof TransactionLimitRequestSchema>;\n// Response: TransactionLimitSchema?\n\n// GET /transaction-limits/role/:roleId\n// Response: z.array(TransactionLimitSchema) ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport {\n    RoleRequestSchema,\n    RoleRequest,\n    RoleResponseSchema,\n    RoleResponse,\n    PermissionResponseSchema,\n    PermissionResponse,\n    AssignRoleRequestSchema,\n    AssignRoleRequest,\n    AssignPermissionRequestSchema,\n    AssignPermissionRequest,\n    AssignResourcePermissionRequestSchema,\n    AssignResourcePermissionRequest,\n    AssignOrgRoleRequestSchema,\n    AssignOrgRoleRequest,\n    TransactionLimitRequestSchema,\n    TransactionLimitRequest,\n    TransactionLimitSchema,\n    TransactionLimit,\n    ResourceTypeSchema,\n    ResourceType\n} from '../types/permission.types';\nimport { z } from 'zod';\n\n/**\n * Handles permissions, roles, assignments, and limits.\n * Note: Many endpoints might return 204 No Content on success for write operations.\n *       The specific response types need verification against actual API behavior.\n */\nexport class PermissionsAPI {\n  // Base paths for different resource groups within permissions\n  private rolesPath = '/roles';\n  private permissionsPath = '/permissions';\n  private userRolesPath = '/user-roles';\n  private userPermissionsPath = '/user-permissions';\n  private resourcePermissionsPath = '/resource-permissions';\n  private orgRolesPath = '/organization-roles';\n  private limitsPath = '/transaction-limits';\n\n  constructor(private httpClient: HttpClient) {}\n\n  // --- Role Management --- (/roles)\n\n  /**\n   * Lists all defined roles.\n   * @returns {Promise<RoleResponse[]>} Array of roles.\n   */\n  async listRoles(): Promise<RoleResponse[]> {\n    const response = await this.httpClient.request<RoleResponse[]>(this.rolesPath, { method: 'GET' });\n    return z.array(RoleResponseSchema).parse(response);\n  }\n\n  /**\n   * Creates a new role.\n   * @param {RoleRequest} roleData - Role details and permissions to assign.\n   * @returns {Promise<RoleResponse>} The created role.\n   */\n  async createRole(roleData: RoleRequest): Promise<RoleResponse> {\n    const validationResult = RoleRequestSchema.safeParse(roleData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid role creation data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<RoleResponse>(\n        this.rolesPath,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return RoleResponseSchema.parse(response);\n  }\n\n  /**\n   * Gets a specific role by its ID.\n   * @param {string} roleId - The UUID of the role.\n   * @returns {Promise<RoleResponse>} Role details.\n   */\n  async getRole(roleId: string): Promise<RoleResponse> {\n    if (!roleId) throw new ValidationError('Role ID is required');\n    const response = await this.httpClient.request<RoleResponse>(`${this.rolesPath}/${roleId}`, { method: 'GET' });\n    return RoleResponseSchema.parse(response);\n  }\n\n  /**\n   * Updates an existing role.\n   * @param {string} roleId - The UUID of the role to update.\n   * @param {RoleRequest} roleData - Role details and permissions to update.\n   * @returns {Promise<RoleResponse>} The updated role.\n   */\n  async updateRole(roleId: string, roleData: RoleRequest): Promise<RoleResponse> {\n    if (!roleId) throw new ValidationError('Role ID is required');\n    const validationResult = RoleRequestSchema.safeParse(roleData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid role update data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<RoleResponse>(\n        `${this.rolesPath}/${roleId}`,\n        {\n            method: 'PUT',\n            body: validationResult.data,\n        }\n    );\n    return RoleResponseSchema.parse(response);\n  }\n\n  /**\n   * Deletes a role.\n   * @param {string} roleId - The UUID of the role to delete.\n   * @returns {Promise<void>}\n   */\n  async deleteRole(roleId: string): Promise<void> {\n    if (!roleId) throw new ValidationError('Role ID is required');\n    await this.httpClient.request<void>(`${this.rolesPath}/${roleId}`, { method: 'DELETE' });\n  }\n\n  // --- Permission Listing --- (/permissions)\n\n  /**\n   * Lists all available permissions.\n   * @returns {Promise<PermissionResponse[]>} Array of permissions.\n   */\n  async listPermissions(): Promise<PermissionResponse[]> {\n    const response = await this.httpClient.request<PermissionResponse[]>(this.permissionsPath, { method: 'GET' });\n    return z.array(PermissionResponseSchema).parse(response);\n  }\n\n  /**\n   * Lists permissions available for a specific resource type.\n   * @param {ResourceType} resourceType - The type of resource (e.g., 'wallet').\n   * @returns {Promise<PermissionResponse[]>} Array of permissions for the type.\n   */\n  async listPermissionsByResourceType(resourceType: ResourceType): Promise<PermissionResponse[]> {\n    const validationResult = ResourceTypeSchema.safeParse(resourceType);\n     if (!validationResult.success) {\n      throw new ValidationError('Invalid resource type', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<PermissionResponse[]>(`${this.permissionsPath}/resource/${resourceType}`, { method: 'GET' });\n    return z.array(PermissionResponseSchema).parse(response);\n  }\n\n  // --- User Role Assignments --- (/user-roles)\n\n  /**\n   * Gets roles assigned to a specific user.\n   * @param {string} userId - The UUID of the user.\n   * @returns {Promise<RoleResponse[]>} Array of roles assigned to the user.\n   */\n  async getUserRoles(userId: string): Promise<RoleResponse[]> {\n      if (!userId) throw new ValidationError('User ID is required');\n      // Assuming response is array of roles based on handler name and common patterns\n      const response = await this.httpClient.request<RoleResponse[]>(`${this.userRolesPath}/${userId}`, { method: 'GET' });\n      return z.array(RoleResponseSchema).parse(response);\n  }\n\n  /**\n   * Assigns a role to a user.\n   * @param {AssignRoleRequest} assignmentData - User ID and Role ID.\n   * @returns {Promise<void>}\n   */\n  async assignRoleToUser(assignmentData: AssignRoleRequest): Promise<void> {\n      const validationResult = AssignRoleRequestSchema.safeParse(assignmentData);\n      if (!validationResult.success) {\n        throw new ValidationError('Invalid user role assignment data', validationResult.error.issues);\n      }\n      await this.httpClient.request<void>(\n          this.userRolesPath,\n          {\n              method: 'POST',\n              body: validationResult.data,\n          }\n      );\n  }\n\n  /**\n   * Revokes a role from a user.\n   * @param {string} userId - The UUID of the user.\n   * @param {string} roleId - The UUID of the role to revoke.\n   * @returns {Promise<void>}\n   */\n  async revokeRoleFromUser(userId: string, roleId: string): Promise<void> {\n      if (!userId) throw new ValidationError('User ID is required');\n      if (!roleId) throw new ValidationError('Role ID is required');\n      await this.httpClient.request<void>(`${this.userRolesPath}/${userId}/${roleId}`, { method: 'DELETE' });\n  }\n\n  // --- User Permission Assignments --- (/user-permissions)\n\n  /**\n   * Gets permissions assigned directly to a user (or combined with roles? Check API behavior).\n   * @param {string} userId - The UUID of the user.\n   * @returns {Promise<PermissionResponse[]>} Array of permissions.\n   */\n  async getUserPermissions(userId: string): Promise<PermissionResponse[]> {\n      if (!userId) throw new ValidationError('User ID is required');\n      // Assuming response is array of permissions based on handler name\n      const response = await this.httpClient.request<PermissionResponse[]>(`${this.userPermissionsPath}/${userId}`, { method: 'GET' });\n      return z.array(PermissionResponseSchema).parse(response);\n  }\n\n  /**\n   * Assigns a direct permission to a user.\n   * @param {AssignPermissionRequest} assignmentData - User ID, Permission ID, and granted status.\n   * @returns {Promise<void>}\n   */\n  async assignPermissionToUser(assignmentData: AssignPermissionRequest): Promise<void> {\n      const validationResult = AssignPermissionRequestSchema.safeParse(assignmentData);\n      if (!validationResult.success) {\n        throw new ValidationError('Invalid user permission assignment data', validationResult.error.issues);\n      }\n      await this.httpClient.request<void>(\n          this.userPermissionsPath,\n          {\n              method: 'POST',\n              body: validationResult.data,\n          }\n      );\n  }\n\n  /**\n   * Revokes a direct permission from a user.\n   * @param {string} userId - The UUID of the user.\n   * @param {string} permissionId - The UUID of the permission to revoke.\n   * @returns {Promise<void>}\n   */\n  async revokePermissionFromUser(userId: string, permissionId: string): Promise<void> {\n      if (!userId) throw new ValidationError('User ID is required');\n      if (!permissionId) throw new ValidationError('Permission ID is required');\n      await this.httpClient.request<void>(`${this.userPermissionsPath}/${userId}/${permissionId}`, { method: 'DELETE' });\n  }\n\n  // --- Resource Permission Assignments --- (/resource-permissions)\n\n  /**\n   * Assigns a permission for a specific resource to a user.\n   * @param {AssignResourcePermissionRequest} assignmentData - User, Resource, Permission details.\n   * @returns {Promise<void>}\n   */\n  async assignPermissionToResource(assignmentData: AssignResourcePermissionRequest): Promise<void> {\n      const validationResult = AssignResourcePermissionRequestSchema.safeParse(assignmentData);\n      if (!validationResult.success) {\n        throw new ValidationError('Invalid resource permission assignment data', validationResult.error.issues);\n      }\n      await this.httpClient.request<void>(\n          this.resourcePermissionsPath,\n          {\n              method: 'POST',\n              body: validationResult.data,\n          }\n      );\n  }\n\n  /**\n   * Revokes a specific resource permission from a user.\n   * @param {string} userId\n   * @param {ResourceType} resourceType\n   * @param {string} resourceId\n   * @param {string} permissionId\n   * @returns {Promise<void>}\n   */\n  async revokePermissionFromResource(userId: string, resourceType: ResourceType, resourceId: string, permissionId: string): Promise<void> {\n      if (!userId) throw new ValidationError('User ID is required');\n      if (!resourceType) throw new ValidationError('Resource Type is required');\n      if (!resourceId) throw new ValidationError('Resource ID is required');\n      if (!permissionId) throw new ValidationError('Permission ID is required');\n\n      // Validate resourceType enum\n      const typeValidation = ResourceTypeSchema.safeParse(resourceType);\n       if (!typeValidation.success) {\n          throw new ValidationError('Invalid resource type');\n      }\n\n      await this.httpClient.request<void>(\n          `${this.resourcePermissionsPath}/${userId}/${resourceType}/${resourceId}/${permissionId}`,\n          { method: 'DELETE' }\n      );\n  }\n\n  // --- Organization Role Assignments --- (/organization-roles)\n\n  /**\n   * Gets roles assigned to a user within a specific organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {string} userId - The UUID of the user.\n   * @returns {Promise<RoleResponse[]>} Array of roles.\n   */\n  async getOrganizationUserRoles(organizationId: string, userId: string): Promise<RoleResponse[]> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    if (!userId) throw new ValidationError('User ID is required');\n    // Assuming response is array of roles\n    const response = await this.httpClient.request<RoleResponse[]>(`${this.orgRolesPath}/${organizationId}/${userId}`, { method: 'GET' });\n    return z.array(RoleResponseSchema).parse(response);\n  }\n\n  /**\n   * Assigns a role to a user within an organization.\n   * @param {AssignOrgRoleRequest} assignmentData - Org ID, User ID, and Role ID.\n   * @returns {Promise<void>}\n   */\n  async assignRoleToOrganizationUser(assignmentData: AssignOrgRoleRequest): Promise<void> {\n    const validationResult = AssignOrgRoleRequestSchema.safeParse(assignmentData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid organization role assignment data', validationResult.error.issues);\n    }\n    await this.httpClient.request<void>(\n        this.orgRolesPath,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n  }\n\n  /**\n   * Revokes a role from a user within an organization.\n   * @param {string} organizationId\n   * @param {string} userId\n   * @param {string} roleId\n   * @returns {Promise<void>}\n   */\n  async revokeRoleFromOrganizationUser(organizationId: string, userId: string, roleId: string): Promise<void> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    if (!userId) throw new ValidationError('User ID is required');\n    if (!roleId) throw new ValidationError('Role ID is required');\n    await this.httpClient.request<void>(`${this.orgRolesPath}/${organizationId}/${userId}/${roleId}`, { method: 'DELETE' });\n  }\n\n  // --- Transaction Limits --- (/transaction-limits)\n\n  /**\n   * Sets transaction limits for a specific role.\n   * @param {TransactionLimitRequest} limitData - Limit details.\n   * @returns {Promise<TransactionLimit>} The created or updated transaction limit.\n   */\n  async setTransactionLimit(limitData: TransactionLimitRequest): Promise<TransactionLimit> {\n    const validationResult = TransactionLimitRequestSchema.safeParse(limitData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid transaction limit data', validationResult.error.issues);\n    }\n    // Assuming the response returns the set limit details\n    const response = await this.httpClient.request<TransactionLimit>(\n        this.limitsPath,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return TransactionLimitSchema.parse(response);\n  }\n\n  /**\n   * Gets transaction limits defined for a specific role.\n   * @param {string} roleId - The UUID of the role.\n   * @returns {Promise<TransactionLimit[]>} Array of transaction limits.\n   */\n  async getTransactionLimitsByRole(roleId: string): Promise<TransactionLimit[]> {\n    if (!roleId) throw new ValidationError('Role ID is required');\n    const response = await this.httpClient.request<TransactionLimit[]>(`${this.limitsPath}/role/${roleId}`, { method: 'GET' });\n    return z.array(TransactionLimitSchema).parse(response);\n  }\n} ",
    "import { z } from 'zod';\n\n// --- Organization --- (/organizations)\n\nexport const OrgRoleSchema = z.enum(['owner', 'admin', 'member']);\nexport type OrgRole = z.infer<typeof OrgRoleSchema>;\n\n// Base Organization - Input from API (snake_case)\nconst ApiOrganizationResponseSchema = z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    description: z.string().nullable().optional(),\n    owner_id: z.string().uuid(), // Snake case from API\n    // email: z.string().email().nullable().optional(), // Not in create response\n    // website: z.string().url().nullable().optional(), // Not in create response\n    // logoUrl: z.string().url().nullable().optional(), // Not in create response\n    // status: z.string(), // Not in create response\n    // metadata: z.record(z.unknown()).nullable().optional(), // Not in create response\n    created_at: z.string(), // Removed .datetime()\n    updated_at: z.string(), // Removed .datetime()\n});\n\n// Base Organization - Output Schema (camelCase, transformed)\nexport const OrganizationResponseSchema = ApiOrganizationResponseSchema.transform(data => ({\n    id: data.id,\n    name: data.name,\n    description: data.description,\n    ownerId: data.owner_id,\n    createdAt: new Date(data.created_at), // Conversion still happens here\n    updatedAt: new Date(data.updated_at), // Conversion still happens here\n}));\nexport type OrganizationResponse = z.infer<typeof OrganizationResponseSchema>;\n\n// POST /organizations\nexport const OrganizationCreateRequestSchema = z.object({\n    name: z.string().min(1).max(255),\n    description: z.string().optional(),\n});\nexport type OrganizationCreateRequest = z.infer<typeof OrganizationCreateRequestSchema>;\n// Response: OrganizationResponseSchema\n\n// GET /organizations (List Response)\nexport const OrganizationListResponseSchema = z.object({\n    totalCount: z.number().int().nonnegative(),\n    organizations: z.array(OrganizationResponseSchema),\n});\nexport type OrganizationListResponse = z.infer<typeof OrganizationListResponseSchema>;\n\n// GET /organizations (Query Params)\nexport const OrganizationListParamsSchema = z.object({\n    page: z.number().int().min(1).optional(), // API might use 0-based offset\n    limit: z.number().int().min(1).max(100).optional(),\n    search: z.string().optional(),\n});\nexport type OrganizationListParams = z.infer<typeof OrganizationListParamsSchema>;\n\n// GET /organizations/:id\n// Response: OrganizationResponseSchema\n\n// PUT /organizations/:id\nexport const OrganizationUpdateRequestSchema = z.object({\n    name: z.string().min(1).max(255).optional(),\n    description: z.string().optional(),\n});\nexport type OrganizationUpdateRequest = z.infer<typeof OrganizationUpdateRequestSchema>;\n// Response: OrganizationResponseSchema\n\n// DELETE /organizations/:id\n// Response: None (204) or MessageResponse\n\n// --- Organization Members --- (/organizations/:id/members)\n\n// Base Member (matches model.OrganizationMemberResponse)\nexport const OrganizationMemberResponseSchema = z.object({\n    id: z.string().uuid(),\n    organizationId: z.string().uuid(),\n    userId: z.string().uuid(),\n    username: z.string(),\n    email: z.string().email(),\n    role: OrgRoleSchema,\n    // joinedAt: z.string().datetime().transform(val => new Date(val)), // Not in response struct\n    createdAt: z.string().datetime().transform(val => new Date(val)),\n    // updatedAt: z.string().datetime().transform(val => new Date(val)), // Not in response struct\n});\nexport type OrganizationMemberResponse = z.infer<typeof OrganizationMemberResponseSchema>;\n\n// POST /organizations/:id/members\nexport const OrganizationMemberCreateRequestSchema = z.object({\n    userId: z.string().uuid(),\n    role: OrgRoleSchema,\n});\nexport type OrganizationMemberCreateRequest = z.infer<typeof OrganizationMemberCreateRequestSchema>;\n// Response: OrganizationMemberResponseSchema\n\n// GET /organizations/:id/members (List Response)\nexport const OrganizationMemberListResponseSchema = z.object({\n    totalCount: z.number().int().nonnegative(),\n    members: z.array(OrganizationMemberResponseSchema),\n});\nexport type OrganizationMemberListResponse = z.infer<typeof OrganizationMemberListResponseSchema>;\n\n// GET /organizations/:id/members (Query Params)\nexport const OrganizationMemberListParamsSchema = z.object({\n    page: z.number().int().min(1).optional(),\n    limit: z.number().int().min(1).max(100).optional(),\n});\nexport type OrganizationMemberListParams = z.infer<typeof OrganizationMemberListParamsSchema>;\n\n// DELETE /organizations/:id/members/:userId\n// Response: None (204) or MessageResponse\n\n// PUT /organizations/:id/members/:userId\nexport const OrganizationMemberUpdateRequestSchema = z.object({\n    role: OrgRoleSchema,\n});\nexport type OrganizationMemberUpdateRequest = z.infer<typeof OrganizationMemberUpdateRequestSchema>;\n// Response: OrganizationMemberResponseSchema\n\n// --- Balance Wallets --- (/organizations/OrganizationBalancesWalletUpgradeable)\n\nexport const BalanceWalletActionSchema = z.enum([\n    'deploy',\n    'allowtokencontract',\n    'disabletokencontract',\n    'allownativecurrency',\n    'disableativecurrency', // Typo in Go model? Assuming disableNativeCurrency\n    'pausecontract',\n    'unpausecontract'\n]);\nexport type BalanceWalletAction = z.infer<typeof BalanceWalletActionSchema>;\n\n// Base Balance Wallet (matches model.OrganizationBalanceWallet)\nexport const OrganizationBalanceWalletSchema = z.object({\n    id: z.string().uuid(),\n    organizationId: z.string().uuid(),\n    walletId: z.string().uuid(), // The deployer wallet ID\n    contractAddress: z.string(),\n    network: z.string(),\n    status: z.string(), // e.g., 'active', 'paused'\n    errorMessage: z.string().optional().nullable(),\n    metadata: z.record(z.unknown()).optional().nullable(), // Represents json.RawMessage\n    createdAt: z.string().datetime().transform(val => new Date(val)),\n    updatedAt: z.string().datetime().transform(val => new Date(val)),\n});\nexport type OrganizationBalanceWallet = z.infer<typeof OrganizationBalanceWalletSchema>;\n\n// POST /organizations/OrganizationBalancesWalletUpgradeable (Deploy)\nexport const DeployBalanceWalletRequestSchema = z.object({\n    network: z.string(),\n    walletId: z.string().uuid(),\n    organizationId: z.string().uuid(),\n    metadata: z.record(z.unknown()).optional(),\n});\nexport type DeployBalanceWalletRequest = z.infer<typeof DeployBalanceWalletRequestSchema>;\n\nexport const DeployBalanceWalletResponseSchema = z.object({\n    organizationbalancewalletId: z.string().uuid(),\n    organizationbalancewalletPublickey: z.string(), // contractAddress\n    status: z.string(),\n});\nexport type DeployBalanceWalletResponse = z.infer<typeof DeployBalanceWalletResponseSchema>;\n\n// GET /organizations/OrganizationBalancesWalletUpgradeable (List Response)\nexport const BalanceWalletListResponseSchema = z.object({\n    totalCount: z.number().int().nonnegative(),\n    wallets: z.array(OrganizationBalanceWalletSchema),\n});\nexport type BalanceWalletListResponse = z.infer<typeof BalanceWalletListResponseSchema>;\n\n// GET /organizations/OrganizationBalancesWalletUpgradeable (Query Params)\nexport const BalanceWalletListParamsSchema = z.object({\n    organizationId: z.string().uuid().optional(),\n    page: z.number().int().min(1).optional(),\n    limit: z.number().int().min(1).max(100).optional(),\n});\nexport type BalanceWalletListParams = z.infer<typeof BalanceWalletListParamsSchema>;\n\n// PATCH /organizations/OrganizationBalancesWalletUpgradeable (Update)\nexport const UpdateBalanceWalletRequestSchema = z.object({\n    organizationId: z.string().uuid(),\n    walletId: z.string().uuid(), // The *balance* wallet ID (contract ID)\n    // userId: z.string().uuid(), // Not needed? Actor taken from context?\n    network: z.string(),\n    action: BalanceWalletActionSchema,\n    tokenAddress: z.string().optional(),\n    tokenName: z.string().optional(),\n    tokenSymbol: z.string().optional(),\n});\nexport type UpdateBalanceWalletRequest = z.infer<typeof UpdateBalanceWalletRequestSchema>;\n\nexport const UpdateBalanceWalletResponseSchema = z.object({\n    transactionId: z.string().uuid(),\n    status: z.string(),\n});\nexport type UpdateBalanceWalletResponse = z.infer<typeof UpdateBalanceWalletResponseSchema>; ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport { formatQueryParams } from '../core/utils';\nimport {\n    OrganizationCreateRequestSchema,\n    OrganizationCreateRequest,\n    OrganizationResponseSchema,\n    OrganizationResponse,\n    OrganizationListParamsSchema,\n    OrganizationListParams,\n    OrganizationListResponseSchema,\n    OrganizationListResponse,\n    OrganizationUpdateRequestSchema,\n    OrganizationUpdateRequest,\n    OrganizationMemberCreateRequestSchema,\n    OrganizationMemberCreateRequest,\n    OrganizationMemberResponseSchema,\n    OrganizationMemberResponse,\n    OrganizationMemberListParamsSchema,\n    OrganizationMemberListParams,\n    OrganizationMemberListResponseSchema,\n    OrganizationMemberListResponse,\n    OrganizationMemberUpdateRequestSchema,\n    OrganizationMemberUpdateRequest,\n    DeployBalanceWalletRequestSchema,\n    DeployBalanceWalletRequest,\n    DeployBalanceWalletResponseSchema,\n    DeployBalanceWalletResponse,\n    BalanceWalletListParamsSchema,\n    BalanceWalletListParams,\n    BalanceWalletListResponseSchema,\n    BalanceWalletListResponse,\n    UpdateBalanceWalletRequestSchema,\n    UpdateBalanceWalletRequest,\n    UpdateBalanceWalletResponseSchema,\n    UpdateBalanceWalletResponse\n} from '../types/organization.types';\nimport { z } from 'zod';\n\n/**\n * Handles organization and member related API endpoints.\n */\nexport class OrganizationsAPI {\n  private basePath = '/organizations';\n  private balanceWalletPath = '/organizations/OrganizationBalancesWalletUpgradeable'; // Specific path for balance wallets\n\n  constructor(private httpClient: HttpClient) {}\n\n  // --- Organization Management --- (/organizations)\n\n  /**\n   * Creates a new organization.\n   * The calling user becomes the owner.\n   * @param {OrganizationCreateRequest} orgData - Organization details.\n   * @returns {Promise<OrganizationResponse>} The created organization.\n   */\n  async create(orgData: OrganizationCreateRequest): Promise<OrganizationResponse> {\n    const validationResult = OrganizationCreateRequestSchema.safeParse(orgData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid organization creation data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<OrganizationResponse>(\n        this.basePath,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return OrganizationResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists organizations accessible to the user.\n   * @param {OrganizationListParams} [params] - Pagination and search parameters.\n   * @returns {Promise<OrganizationListResponse>} Paginated list of organizations.\n   */\n  async list(params?: OrganizationListParams): Promise<OrganizationListResponse> {\n    const validationResult = OrganizationListParamsSchema.safeParse(params || {});\n    if (!validationResult.success) {\n        throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n    }\n    // Convert page/limit for 0-based offset if API expects that\n    const queryParams: Record<string, any> = { ...validationResult.data };\n    if (queryParams.page !== undefined) {\n        // Assuming API uses 0-based offset, calculate from 1-based page\n        queryParams.offset = ((queryParams.page || 1) - 1) * (queryParams.limit || 10); // Default limit 10 if not set\n        delete queryParams.page; // Remove page as API might expect offset\n    }\n    const formattedParams = formatQueryParams(queryParams);\n\n    const response = await this.httpClient.request<OrganizationListResponse>(\n        this.basePath,\n        {\n            method: 'GET',\n            queryParams: formattedParams,\n        }\n    );\n    return OrganizationListResponseSchema.parse(response);\n  }\n\n  /**\n   * Gets details for a specific organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @returns {Promise<OrganizationResponse>} Organization details.\n   */\n  async getById(organizationId: string): Promise<OrganizationResponse> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    const response = await this.httpClient.request<OrganizationResponse>(`${this.basePath}/${organizationId}`, { method: 'GET' });\n    return OrganizationResponseSchema.parse(response);\n  }\n\n  /**\n   * Updates an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {OrganizationUpdateRequest} updateData - Fields to update.\n   * @returns {Promise<OrganizationResponse>} The updated organization.\n   */\n  async update(organizationId: string, updateData: OrganizationUpdateRequest): Promise<OrganizationResponse> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    const validationResult = OrganizationUpdateRequestSchema.safeParse(updateData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid organization update data', validationResult.error.issues);\n    }\n    if (Object.keys(validationResult.data).length === 0) {\n        throw new ValidationError('At least one field must be provided for update');\n    }\n    const response = await this.httpClient.request<OrganizationResponse>(\n        `${this.basePath}/${organizationId}`,\n        {\n            method: 'PUT',\n            body: validationResult.data,\n        }\n    );\n    return OrganizationResponseSchema.parse(response);\n  }\n\n  /**\n   * Deletes an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @returns {Promise<void>}\n   */\n  async delete(organizationId: string): Promise<void> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    await this.httpClient.request<void>(`${this.basePath}/${organizationId}`, { method: 'DELETE' });\n  }\n\n  // --- Organization Member Management --- (/organizations/:id/members)\n\n  /**\n   * Adds a member to an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {OrganizationMemberCreateRequest} memberData - User ID and role.\n   * @returns {Promise<OrganizationMemberResponse>} Details of the added member.\n   */\n  async addMember(organizationId: string, memberData: OrganizationMemberCreateRequest): Promise<OrganizationMemberResponse> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    const validationResult = OrganizationMemberCreateRequestSchema.safeParse(memberData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid member creation data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<OrganizationMemberResponse>(\n        `${this.basePath}/${organizationId}/members`,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    return OrganizationMemberResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists members of an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {OrganizationMemberListParams} [params] - Pagination parameters.\n   * @returns {Promise<OrganizationMemberListResponse>} Paginated list of members.\n   */\n  async listMembers(organizationId: string, params?: OrganizationMemberListParams): Promise<OrganizationMemberListResponse> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    const validationResult = OrganizationMemberListParamsSchema.safeParse(params || {});\n     if (!validationResult.success) {\n        throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n    }\n    const queryParams: Record<string, any> = { ...validationResult.data };\n     if (queryParams.page !== undefined) {\n        queryParams.offset = ((queryParams.page || 1) - 1) * (queryParams.limit || 10); // Default limit 10\n        delete queryParams.page;\n    }\n    const formattedParams = formatQueryParams(queryParams);\n\n    const response = await this.httpClient.request<OrganizationMemberListResponse>(\n        `${this.basePath}/${organizationId}/members`,\n        {\n            method: 'GET',\n            queryParams: formattedParams,\n        }\n    );\n    return OrganizationMemberListResponseSchema.parse(response);\n  }\n\n  /**\n   * Removes a member from an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {string} userId - The UUID of the user to remove.\n   * @returns {Promise<void>}\n   */\n  async removeMember(organizationId: string, userId: string): Promise<void> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    if (!userId) throw new ValidationError('User ID is required');\n    await this.httpClient.request<void>(`${this.basePath}/${organizationId}/members/${userId}`, { method: 'DELETE' });\n  }\n\n  /**\n   * Updates the role of a member within an organization.\n   * @param {string} organizationId - The UUID of the organization.\n   * @param {string} userId - The UUID of the user whose role is being updated.\n   * @param {OrganizationMemberUpdateRequest} updateData - The new role.\n   * @returns {Promise<OrganizationMemberResponse>} The updated member details.\n   */\n  async updateMemberRole(organizationId: string, userId: string, updateData: OrganizationMemberUpdateRequest): Promise<OrganizationMemberResponse> {\n    if (!organizationId) throw new ValidationError('Organization ID is required');\n    if (!userId) throw new ValidationError('User ID is required');\n    const validationResult = OrganizationMemberUpdateRequestSchema.safeParse(updateData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid member update data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<OrganizationMemberResponse>(\n        `${this.basePath}/${organizationId}/members/${userId}`,\n        {\n            method: 'PUT',\n            body: validationResult.data,\n        }\n    );\n    return OrganizationMemberResponseSchema.parse(response);\n  }\n\n  // --- Balance Wallet Management --- (/organizations/OrganizationBalancesWalletUpgradeable)\n\n  /**\n   * Deploys a new OrganizationBalancesWalletUpgradeable contract.\n   * @param {DeployBalanceWalletRequest} deployData - Deployment details (network, deployer wallet, org ID).\n   * @returns {Promise<DeployBalanceWalletResponse>} Deployment status and identifiers.\n   */\n  async deployBalanceWallet(deployData: DeployBalanceWalletRequest): Promise<DeployBalanceWalletResponse> {\n      const validationResult = DeployBalanceWalletRequestSchema.safeParse(deployData);\n      if (!validationResult.success) {\n          throw new ValidationError('Invalid balance wallet deployment data', validationResult.error.issues);\n      }\n      const response = await this.httpClient.request<DeployBalanceWalletResponse>(\n          this.balanceWalletPath,\n          {\n              method: 'POST',\n              body: validationResult.data,\n          }\n      );\n      return DeployBalanceWalletResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists deployed OrganizationBalancesWalletUpgradeable contracts.\n   * Can be filtered by organization ID.\n   * @param {BalanceWalletListParams} [params] - Filtering and pagination parameters.\n   * @returns {Promise<BalanceWalletListResponse>} Paginated list of balance wallets.\n   */\n  async listBalanceWallets(params?: BalanceWalletListParams): Promise<BalanceWalletListResponse> {\n      const validationResult = BalanceWalletListParamsSchema.safeParse(params || {});\n      if (!validationResult.success) {\n          throw new ValidationError('Invalid list parameters', validationResult.error.issues);\n      }\n      const queryParams: Record<string, any> = { ...validationResult.data };\n      if (queryParams.page !== undefined) {\n          queryParams.offset = ((queryParams.page || 1) - 1) * (queryParams.limit || 10);\n          delete queryParams.page;\n      }\n      const formattedParams = formatQueryParams(queryParams);\n\n      const response = await this.httpClient.request<BalanceWalletListResponse>(\n          this.balanceWalletPath,\n          {\n              method: 'GET',\n              queryParams: formattedParams,\n          }\n      );\n      return BalanceWalletListResponseSchema.parse(response);\n  }\n\n  /**\n   * Updates a deployed OrganizationBalancesWalletUpgradeable contract (e.g., allow token, pause).\n   * @param {UpdateBalanceWalletRequest} updateData - Update action and parameters.\n   * @returns {Promise<UpdateBalanceWalletResponse>} Transaction ID and status of the update operation.\n   */\n  async updateBalanceWallet(updateData: UpdateBalanceWalletRequest): Promise<UpdateBalanceWalletResponse> {\n      const validationResult = UpdateBalanceWalletRequestSchema.safeParse(updateData);\n      if (!validationResult.success) {\n          throw new ValidationError('Invalid balance wallet update data', validationResult.error.issues);\n      }\n      const response = await this.httpClient.request<UpdateBalanceWalletResponse>(\n          this.balanceWalletPath,\n          {\n              method: 'PATCH',\n              body: validationResult.data,\n          }\n      );\n      return UpdateBalanceWalletResponseSchema.parse(response);\n  }\n} ",
    "import { z } from 'zod';\n\n// Enums based on Go consts\nexport const ApiKeyStatusSchema = z.enum(['active', 'inactive', 'revoked']);\nexport type ApiKeyStatus = z.infer<typeof ApiKeyStatusSchema>;\n\n// API Key Response - Input from API (snake_case)\nconst ApiApiKeyResponseSchema = z.object({\n    id: z.string().uuid(),\n    name: z.string(),\n    key: z.string().optional(), // Key only present on creation\n    permissions: z.array(z.string()),\n    status: ApiKeyStatusSchema, // Assuming API returns 'active' or 'inactive'\n    expires_at: z.string().nullable().optional(), // snake_case, optional, can be null\n    created_at: z.string(), // snake_case\n    last_used_at: z.string().nullable().optional(), // snake_case, optional, can be null\n    organization_id: z.string().uuid().nullable().optional(), // snake_case, optional, can be null\n});\n\n// API Key Response - Output Schema (camelCase, transformed)\nexport const ApiKeyResponseSchema = ApiApiKeyResponseSchema.transform(data => ({\n    id: data.id,\n    name: data.name,\n    key: data.key,\n    permissions: data.permissions,\n    status: data.status,\n    expiresAt: data.expires_at ? new Date(data.expires_at) : null,\n    createdAt: new Date(data.created_at),\n    lastUsedAt: data.last_used_at ? new Date(data.last_used_at) : null,\n    organizationId: data.organization_id,\n}));\nexport type ApiKeyResponse = z.infer<typeof ApiKeyResponseSchema>;\n\n// Generic API response wrapper used by the handler\nexport const ApiKeyApiResponseSchema = z.object({\n    success: z.boolean(),\n    data: ApiKeyResponseSchema.optional(), // Data is optional, can be array for list\n    // error: z.string().optional(), // Error handled by HttpClient\n    // message: z.string().optional(),\n});\nexport type ApiKeyApiResponse = z.infer<typeof ApiKeyApiResponseSchema>;\n\nexport const ApiKeyListApiResponseSchema = z.object({\n    success: z.boolean(),\n    data: z.array(ApiKeyResponseSchema).optional(),\n});\nexport type ApiKeyListApiResponse = z.infer<typeof ApiKeyListApiResponseSchema>;\n\n// POST /api-keys\nconst ApiKeyCreateRequestInputSchema = z.object({\n    name: z.string().min(3).max(100),\n    permissions: z.array(z.string()).min(1),\n    expiresAt: z.string().datetime({ message: \"expiresAt must be a valid ISO 8601 string\" }).optional(), // Input uses camelCase\n    organizationId: z.string().uuid({ message: \"organizationId is required and must be a valid UUID\" }), // Input uses camelCase\n});\n\n// Transform camelCase input to snake_case for the API request body\nexport const ApiKeyCreateRequestSchema = ApiKeyCreateRequestInputSchema.transform(data => ({\n    name: data.name,\n    permissions: data.permissions,\n    expires_at: data.expiresAt, // Convert to snake_case\n    organization_id: data.organizationId, // Convert to snake_case\n}));\n\nexport type ApiKeyCreateRequest = z.infer<typeof ApiKeyCreateRequestInputSchema>; // Base type uses camelCase\n// Response: ApiKeyResponseSchema (transformed, with key included)\n\n// GET /api-keys\n// Response: z.array(ApiKeyResponseSchema) (keys omitted)\n\n// GET /api-keys/:id\n// Response: ApiKeyResponseSchema (key omitted)\n\n// PATCH /api-keys/:id\nexport const ApiKeyUpdateRequestSchema = z.object({\n    name: z.string().min(3).max(100).optional(),\n    permissions: z.array(z.string()).optional(),\n    expiresAt: z.string().datetime({ message: \"expiresAt must be a valid ISO 8601 string\" }).optional(),\n    status: z.enum(['active', 'inactive']).optional(), // Only allow setting active/inactive\n}).refine(data => Object.keys(data).length > 0, { message: \"At least one field must be provided for update\" });\nexport type ApiKeyUpdateRequest = z.infer<typeof ApiKeyUpdateRequestSchema>;\n// Response: ApiKeyResponseSchema (key omitted)\n\n// DELETE /api-keys/:id\n// Response: None (204) or generic success response ",
    "import { HttpClient } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport {\n    ApiKeyCreateRequestSchema,\n    ApiKeyResponseSchema,\n    ApiKeyUpdateRequestSchema,\n} from '../types/apiKey.types';\nimport type {\n    ApiKeyCreateRequest,\n    ApiKeyResponse,\n    ApiKeyUpdateRequest,\n} from '../types/apiKey.types';\nimport { z } from 'zod';\n\n/**\n * Handles API Key management endpoints.\n * Note: These endpoints typically require JWT authentication (not API Key auth).\n */\nexport class ApiKeysAPI {\n  private path = '/api-keys';\n\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Creates a new API key.\n   * IMPORTANT: The returned `key` field is only available in this response.\n   * Store it securely immediately, as it cannot be retrieved again.\n   * Requires JWT authentication.\n   * @param {ApiKeyCreateRequest} keyData - Details for the new key.\n   * @returns {Promise<ApiKeyResponse>} The created API key details, including the raw key.\n   */\n  async create(keyData: ApiKeyCreateRequest): Promise<ApiKeyResponse> {\n    const validationResult = ApiKeyCreateRequestSchema.safeParse(keyData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid API key creation data', validationResult.error.issues);\n    }\n    // The handler wraps response in ApiResponse{data=...}, HttpClient should handle unwrapping\n    const response = await this.httpClient.request<ApiKeyResponse>(\n        this.path,\n        {\n            method: 'POST',\n            body: validationResult.data,\n        }\n    );\n    // The ApiKeyResponseSchema handles the snake_case to camelCase transformation\n    const parsedResponse = ApiKeyResponseSchema.parse(response); \n\n    // Manually check if the key is present after parsing\n    if (!parsedResponse.key) {\n        throw new ValidationError('API key secret was missing from the creation response.');\n    }\n    \n    // We know key is present now, but TypeScript might not, so we return the parsed response.\n    // If stricter typing is needed, we could refine the output type.\n    return parsedResponse;\n  }\n\n  /**\n   * Lists API keys for the authenticated user.\n   * Keys are masked in the response.\n   * Requires JWT authentication.\n   * @returns {Promise<ApiKeyResponse[]>} Array of API key details (key omitted).\n   */\n  async list(): Promise<ApiKeyResponse[]> {\n    // The handler wraps response in ApiResponse{data=...}, HttpClient should handle unwrapping\n    const response = await this.httpClient.request<ApiKeyResponse[]>(this.path, { method: 'GET' });\n    // Ensure response is an array and keys are omitted (which ApiKeyResponseSchema handles)\n    return z.array(ApiKeyResponseSchema).parse(response);\n  }\n\n  /**\n   * Gets details for a specific API key.\n   * Key is masked in the response.\n   * Requires JWT authentication.\n   * @param {string} apiKeyId - The UUID of the API key.\n   * @returns {Promise<ApiKeyResponse>} API key details (key omitted).\n   */\n  async getById(apiKeyId: string): Promise<ApiKeyResponse> {\n    if (!apiKeyId) throw new ValidationError('API Key ID is required');\n    // The handler wraps response in ApiResponse{data=...}, HttpClient should handle unwrapping\n    const response = await this.httpClient.request<ApiKeyResponse>(`${this.path}/${apiKeyId}`, { method: 'GET' });\n    return ApiKeyResponseSchema.parse(response);\n  }\n\n  /**\n   * Updates an API key (e.g., name, status, permissions, expiry).\n   * Requires JWT authentication.\n   * @param {string} apiKeyId - The UUID of the API key to update.\n   * @param {ApiKeyUpdateRequest} updateData - Fields to update.\n   * @returns {Promise<ApiKeyResponse>} Updated API key details (key omitted).\n   */\n  async update(apiKeyId: string, updateData: ApiKeyUpdateRequest): Promise<ApiKeyResponse> {\n    if (!apiKeyId) throw new ValidationError('API Key ID is required');\n    const validationResult = ApiKeyUpdateRequestSchema.safeParse(updateData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid API key update data', validationResult.error.issues);\n    }\n     // The handler wraps response in ApiResponse{data=...}, HttpClient should handle unwrapping\n    const response = await this.httpClient.request<ApiKeyResponse>(\n        `${this.path}/${apiKeyId}`,\n        {\n            method: 'PATCH',\n            body: validationResult.data,\n        }\n    );\n    return ApiKeyResponseSchema.parse(response);\n  }\n\n  /**\n   * Deletes (revokes) an API key.\n   * Requires JWT authentication.\n   * @param {string} apiKeyId - The UUID of the API key to delete.\n   * @returns {Promise<void>}\n   */\n  async delete(apiKeyId: string): Promise<void> {\n    if (!apiKeyId) throw new ValidationError('API Key ID is required');\n    // Expecting 204 No Content or similar success response\n    await this.httpClient.request<void>(`${this.path}/${apiKeyId}`, { method: 'DELETE' });\n  }\n} ",
    "import { z } from 'zod';\n\n// --- Deploy Contract Schemas ---\n\n// SDK Input (camelCase)\nconst DeployParamsInputSchema = z.object({\n    contractType: z.string(), // e.g., \"WalletUpgradeable\"\n    network: z.string(),\n    walletId: z.string().uuid(),\n    parameters: z.record(z.unknown()).optional(), // Assuming any object is fine\n});\n\n// API Request Body (snake_case, transformed)\nexport const DeployParamsSchema = DeployParamsInputSchema.transform(data => ({\n    contract_type: data.contractType,\n    network: data.network,\n    wallet_id: data.walletId,\n    parameters: data.parameters,\n}));\nexport type DeployParams = z.infer<typeof DeployParamsInputSchema>; // Input type remains camelCase\n\n// API Response (snake_case)\nconst ApiContractDeploymentResponseSchema = z.object({\n    id: z.string().uuid(),\n    request_id: z.string().uuid(),\n    organization_id: z.string().uuid(),\n    created_by_user_id: z.string().uuid().nullable().optional(), // Assuming UUID or null\n    created_by_api_key_id: z.string().uuid().nullable().optional(), // Assuming UUID or null\n    deployer_wallet_id: z.string().uuid(),\n    network: z.string(),\n    status: z.string(), // e.g., pending, completed, failed\n    contract_type: z.string(),\n    contract_address: z.string().nullable().optional(),\n    transaction_hash: z.string().nullable().optional(),\n    error_message: z.string().nullable().optional(),\n    created_at: z.string(), // Handle date parsing in transform\n    updated_at: z.string(), // Handle date parsing in transform\n});\n\n// SDK Type (camelCase, transformed)\nexport const ContractDeploymentResponseSchema = ApiContractDeploymentResponseSchema.transform(data => ({\n    id: data.id,\n    requestId: data.request_id,\n    organizationId: data.organization_id,\n    createdByUserId: data.created_by_user_id,\n    createdByApiKeyId: data.created_by_api_key_id,\n    deployerWalletId: data.deployer_wallet_id,\n    network: data.network,\n    status: data.status,\n    contractType: data.contract_type,\n    contractAddress: data.contract_address,\n    transactionHash: data.transaction_hash,\n    errorMessage: data.error_message,\n    createdAt: new Date(data.created_at),\n    updatedAt: new Date(data.updated_at),\n}));\nexport type ContractDeploymentResponse = z.infer<typeof ContractDeploymentResponseSchema>;\n\n// --- ABI Schemas ---\n\n// Matches model.ContractABI (Assuming ABI is a JSON string)\nexport const ImportABISchema = z.object({\n    contractAddress: z.string(),\n    network: z.string(),\n    abi: z.string().refine(val => {\n        try { JSON.parse(val); return true; } catch { return false; }\n    }, { message: \"ABI must be a valid JSON string\" }),\n});\nexport type ImportABI = z.infer<typeof ImportABISchema>;\n\n// Output when getting an ABI\nexport const ContractABISchema = z.object({\n    contractAddress: z.string(),\n    network: z.string(),\n    abi: z.string(), // Assuming stored as string\n    // Add other fields if API returns more than just these\n});\nexport type ContractABI = z.infer<typeof ContractABISchema>;\n\n// --- Contract Function Schemas ---\n\nconst FunctionInputOutputSchema = z.object({\n    name: z.string(),\n    type: z.string(),\n    // Add indexed, components etc. if needed for complex types\n});\n\n// API Response (snake_case) - Updated to match server model\nconst ApiContractFunctionSchema = z.object({\n    id: z.number(),\n    contract_abi_id: z.number(),\n    function_name: z.string(),\n    function_signature: z.string(),\n    access_type: z.string(),\n    state_mutability: z.string(),\n    parameter_json: z.string(),\n    return_json: z.string().optional(),\n    created_at: z.string(),\n});\n\n// SDK Type (camelCase, transformed)\nexport const ContractFunctionSchema = ApiContractFunctionSchema.transform(data => {\n    // Parse parameter_json and return_json if present\n    let inputs = [];\n    let outputs = [];\n    \n    try {\n        if (data.parameter_json) {\n            inputs = JSON.parse(data.parameter_json);\n        }\n        if (data.return_json) {\n            outputs = JSON.parse(data.return_json);\n        }\n    } catch (error) {\n        console.warn(\"Error parsing function parameters/returns JSON\", error);\n    }\n    \n    return {\n        id: data.id,\n        contractAbiId: data.contract_abi_id,\n        name: data.function_name,\n        signature: data.function_signature,\n        accessType: data.access_type,\n        stateMutability: data.state_mutability,\n        inputs: inputs,\n        outputs: outputs,\n        createdAt: new Date(data.created_at)\n    };\n});\nexport type ContractFunction = z.infer<typeof ContractFunctionSchema>;\n\n// Response for List Functions\nexport const ContractFunctionListSchema = z.array(ContractFunctionSchema);\n\n// --- Call/Execute Function Schemas ---\n\n// Response for calling a view/pure function (matches Swagger)\n// API Response (snake_case - assuming result is nested)\nconst ApiCallFunctionResponseSchema = z.object({\n    result: z.any(), // Result could be any type (string, number, object, array)\n    raw_result: z.string().optional(), // Optional raw JSON string\n});\n\n// SDK Type (camelCase)\nexport const CallFunctionResponseSchema = ApiCallFunctionResponseSchema.transform(data => ({\n    result: data.result,\n    rawResult: data.raw_result,\n}));\nexport type CallFunctionResponse = z.infer<typeof CallFunctionResponseSchema>;\n\n// TODO: Add schemas for ExecuteFunction request/response if needed\n\n// POST /deployments\n// Request: DeployParamsSchema\n// Response: ContractDeploymentResponseSchema (Status 202)\n\n// GET /deployments\n// Response: z.array(ContractDeploymentResponseSchema)\n\n// GET /deployments/:requestID\n// Response: ContractDeploymentResponseSchema\n\n// POST /abis\n// Response: ContractABISchema\n\n// GET /abis/:contractAddress\n// Query Params: network (string, required)\n// Response: ContractABISchema\n\n// GET /abis/:contractAddress/functions\n// Query Params: network (string, required)\n// Headers: X-Organization-ID, X-Wallet-ID or X-Wallet-Address\n// Response: z.array(ContractFunctionSchema) ",
    "import { HttpClient } from '../core/httpClient';\nimport type { RequestOptions } from '../core/httpClient';\nimport { ValidationError } from '../core/errors';\nimport {\n    DeployParamsSchema,\n    ContractDeploymentResponseSchema,\n    ImportABISchema,\n    ContractABISchema,\n    ContractFunctionSchema,\n    CallFunctionResponseSchema,\n} from '../types/contract.types';\nimport type {\n    DeployParams,\n    ContractDeploymentResponse,\n    ImportABI,\n    ContractABI,\n    ContractFunction,\n    CallFunctionResponse,\n} from '../types/contract.types';\nimport { z } from 'zod';\nimport { MessageResponseSchema } from '../types/auth.types';\nimport type { MessageResponse } from '../types/auth.types';\n\n/**\n * Handles Contract Deployment and ABI management endpoints.\n */\nexport class ContractsAPI {\n  private deploymentsPath = '/contracts/deployments';\n  private abisPath = '/contracts/abi';\n  private contractInteractionsPath = '/contract-interactions';\n\n  constructor(private httpClient: HttpClient) {}\n\n  // --- Contract Deployments --- (/contracts/deployments)\n\n  /**\n   * Initiates a contract deployment.\n   * The deployment process is asynchronous.\n   * @param {DeployParams} deployData - Details for the deployment.\n   * @returns {Promise<ContractDeploymentResponse>} Initial deployment status (usually pending).\n   */\n  async deploy(deployData: DeployParams): Promise<ContractDeploymentResponse> {\n    const validationResult = DeployParamsSchema.safeParse(deployData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid contract deployment data', validationResult.error.issues);\n    }\n    const response = await this.httpClient.request<ContractDeploymentResponse>(\n        '/contracts',\n        {\n            method: 'POST',\n            body: validationResult.data,\n            expectedStatus: 202, // API returns 202 Accepted\n        }\n    );\n    return ContractDeploymentResponseSchema.parse(response);\n  }\n\n  /**\n   * Lists contract deployments for the organization associated with the API key/token.\n   * Requires X-Organization-ID header to be set implicitly or explicitly.\n   * @returns {Promise<ContractDeploymentResponse[]>} List of deployment details.\n   */\n  async listDeployments(): Promise<ContractDeploymentResponse[]> {\n    // Note: Requires X-Organization-ID header, managed by HttpClient\n    const response = await this.httpClient.request<ContractDeploymentResponse[]>(this.deploymentsPath, { method: 'GET' });\n    return z.array(ContractDeploymentResponseSchema).parse(response);\n  }\n\n  /**\n   * Gets the status of a specific contract deployment.\n   * @param {string} requestId - The user-facing request ID of the deployment.\n   * @returns {Promise<ContractDeploymentResponse>} Deployment status details.\n   */\n  async getDeploymentStatus(requestId: string): Promise<ContractDeploymentResponse> {\n    if (!requestId) throw new ValidationError('Request ID is required');\n    // Use the correct path /contracts/{requestId} based on Swagger\n    const response = await this.httpClient.request<ContractDeploymentResponse>(`/contracts/${requestId}`, { method: 'GET' });\n    return ContractDeploymentResponseSchema.parse(response);\n  }\n\n  // --- Contract ABIs --- (/contracts/abi)\n\n  /**\n   * Imports a contract ABI.\n   * Requires X-Organization-ID header.\n   * @param {ImportABI} abiData - Contract address, network, and ABI JSON string.\n   * @returns {Promise<MessageResponse>} Success message.\n   */\n  async importAbi(abiData: ImportABI): Promise<MessageResponse> {\n    const validationResult = ImportABISchema.safeParse(abiData);\n    if (!validationResult.success) {\n      throw new ValidationError('Invalid ABI import data', validationResult.error.issues);\n    }\n    // Note: Requires X-Organization-ID header, managed by HttpClient\n    const response = await this.httpClient.request<MessageResponse>(\n        this.abisPath,\n        {\n            method: 'POST',\n            body: validationResult.data,\n            expectedStatus: 201\n        }\n    );\n    return MessageResponseSchema.parse(response);\n  }\n\n  /**\n   * Gets the imported ABI for a contract address and network.\n   * Requires X-Organization-ID header.\n   * @param {string} contractAddress - The address of the contract.\n   * @param {string} network - The network the contract is on.\n   * @returns {Promise<ContractABI>} The imported ABI details.\n   */\n  async getAbi(contractAddress: string, network: string): Promise<ContractABI> {\n    if (!contractAddress) throw new ValidationError('Contract Address is required');\n    if (!network) throw new ValidationError('Network query parameter is required');\n    // Note: Requires X-Organization-ID header, managed by HttpClient\n    const response = await this.httpClient.request<ContractABI>(\n        `${this.abisPath}/${contractAddress}`,\n        {\n            method: 'GET',\n            queryParams: { network },\n        }\n    );\n    return ContractABISchema.parse(response);\n  }\n\n  /**\n   * Lists the functions parsed from an imported contract ABI.\n   * Requires X-Organization-ID header and EITHER X-Wallet-ID or X-Wallet-Address header for verification.\n   * @param {string} contractAddress - The address of the contract.\n   * @param {string} network - The network the contract is on.\n   * @param {object} verificationHeaders - Headers for verification: { 'X-Wallet-ID': string } or { 'X-Wallet-Address': string }.\n   * @returns {Promise<ContractFunction[]>} List of functions from the ABI.\n   */\n  async listContractFunctions(\n      contractAddress: string,\n      network: string,\n      verificationHeaders: { 'X-Wallet-ID': string } | { 'X-Wallet-Address': string }\n  ): Promise<ContractFunction[]> {\n    if (!contractAddress) throw new ValidationError('Contract Address is required');\n    if (!network) throw new ValidationError('Network query parameter is required');\n    \n    // Use type narrowing to safely check the union type\n    const hasWalletId = 'X-Wallet-ID' in verificationHeaders;\n    const hasWalletAddress = 'X-Wallet-Address' in verificationHeaders;\n\n    if (!verificationHeaders || (!hasWalletId && !hasWalletAddress) || (hasWalletId && !verificationHeaders['X-Wallet-ID']) || (hasWalletAddress && !verificationHeaders['X-Wallet-Address'])) {\n        throw new ValidationError('A valid X-Wallet-ID or X-Wallet-Address header is required for verification');\n    }\n\n    const options: RequestOptions = {\n        method: 'GET',\n        queryParams: { network },\n        headers: verificationHeaders, // Add verification headers\n    };\n\n    // Note: Requires X-Organization-ID header, managed by HttpClient\n    // Revert path back to using the ABI endpoint\n    const response = await this.httpClient.request<ContractFunction[]>(\n        `${this.abisPath}/${contractAddress}/functions`, // Reverted path\n        options\n    );\n    return z.array(ContractFunctionSchema).parse(response);\n  }\n\n  /**\n   * Calls a read-only (view or pure) function on a contract by its name.\n   * Does not create a blockchain transaction.\n   * Requires JWT or API Key authentication and wallet verification headers.\n   * @param contractAddress The address of the contract.\n   * @param network The network the contract is on.\n   * @param functionName The name of the function to call.\n   * @param verificationHeaders Headers for verification: { 'X-Wallet-ID': string } or { 'X-Wallet-Address': string }.\n   * @param parameters Optional parameters for the function call (will be JSON stringified).\n   * @returns {Promise<CallFunctionResponse>} The result of the function call.\n   */\n  async callViewFunctionByName(\n      contractAddress: string,\n      network: string,\n      functionName: string,\n      verificationHeaders: { 'X-Wallet-ID': string } | { 'X-Wallet-Address': string },\n      parameters?: Record<string, any>\n  ): Promise<CallFunctionResponse> {\n      if (!contractAddress) throw new ValidationError('Contract Address is required');\n      if (!network) throw new ValidationError('Network is required');\n      if (!functionName) throw new ValidationError('Function Name is required');\n\n      // Validate verification headers (copied from listContractFunctions)\n      const hasWalletId = 'X-Wallet-ID' in verificationHeaders;\n      const hasWalletAddress = 'X-Wallet-Address' in verificationHeaders;\n      if (!verificationHeaders || (!hasWalletId && !hasWalletAddress) || (hasWalletId && !verificationHeaders['X-Wallet-ID']) || (hasWalletAddress && !verificationHeaders['X-Wallet-Address'])) {\n          throw new ValidationError('A valid X-Wallet-ID or X-Wallet-Address header is required for verification');\n      }\n\n      const queryParams: Record<string, string | undefined> = { network };\n      if (parameters && Object.keys(parameters).length > 0) {\n          try {\n              queryParams.parameters = JSON.stringify(parameters);\n          } catch (e) {\n              throw new ValidationError('Failed to stringify parameters for query string');\n          }\n      }\n\n      const options: RequestOptions = {\n          method: 'GET',\n          queryParams: queryParams,\n          headers: verificationHeaders,\n      };\n\n      // Use the new contract-interactions path\n      const path = `${this.contractInteractionsPath}/contracts/${contractAddress}/call-by-name/${functionName}`;\n\n      console.log(`Calling view function: GET ${path} with params: ${JSON.stringify(queryParams)}`);\n\n      // HttpClient handles the base URL and auth\n      const response = await this.httpClient.request<CallFunctionResponse>(\n          path,\n          options\n      );\n\n      // Assuming the API response matches ApiCallFunctionResponseSchema and HttpClient handles unwrapping if necessary\n      // The ContractFunctionResponseSchema transformation handles snake_case -> camelCase\n      return CallFunctionResponseSchema.parse(response);\n  }\n} ",
    "import { HttpClient, HttpClientConfig } from './core/httpClient';\nimport { AuthAPI } from './resources/auth';\nimport { WalletsAPI } from './resources/wallets';\nimport { TransactionsAPI } from './resources/transactions';\nimport { TransactionApprovalsAPI } from './resources/transactionApprovals';\nimport { PermissionsAPI } from './resources/permissions';\nimport { OrganizationsAPI } from './resources/organizations';\nimport { ApiKeysAPI } from './resources/apiKeys';\nimport { ContractsAPI } from './resources/contracts';\n// Import other resource APIs here as they are created\n// ...\n\n/**\n * Configuration for the Transactions SDK.\n */\nexport interface TransactionsSDKConfig extends HttpClientConfig {\n  // Add any SDK-specific config options here if needed in the future\n}\n\n/**\n * Main client for interacting with the Transactions API.\n */\nexport class TransactionsSDK {\n  private httpClient: HttpClient;\n\n  // Resource API properties\n  public readonly auth: AuthAPI;\n  public readonly wallets: WalletsAPI;\n  public readonly transactions: TransactionsAPI;\n  public readonly transactionApprovals: TransactionApprovalsAPI;\n  public readonly permissions: PermissionsAPI;\n  public readonly organizations: OrganizationsAPI;\n  public readonly apiKeys: ApiKeysAPI;\n  public readonly contracts: ContractsAPI;\n  // ... add other resources here\n\n  constructor(config: TransactionsSDKConfig) {\n    this.httpClient = new HttpClient(config);\n\n    // Initialize resource APIs, passing the httpClient\n    this.auth = new AuthAPI(this.httpClient);\n    this.wallets = new WalletsAPI(this.httpClient);\n    this.transactions = new TransactionsAPI(this.httpClient);\n    this.transactionApprovals = new TransactionApprovalsAPI(this.httpClient);\n    this.permissions = new PermissionsAPI(this.httpClient);\n    this.organizations = new OrganizationsAPI(this.httpClient);\n    this.apiKeys = new ApiKeysAPI(this.httpClient);\n    this.contracts = new ContractsAPI(this.httpClient);\n    // ... initialize other resources here\n  }\n\n  /**\n   * Provides direct access to the underlying HttpClient if needed for custom requests.\n   */\n  public getHttpClient(): HttpClient {\n    return this.httpClient;\n  }\n\n  // Add any top-level convenience methods if necessary\n  // Example:\n  // async healthCheck(): Promise<{ status: string; mode: string }> {\n  //   // Implementation using this.httpClient.request(...)\n  // }\n} ",
    "// Main SDK export\nexport { TransactionsSDK } from './src/sdk';\nexport type { TransactionsSDKConfig } from './src/sdk';\n\n// Core exports\nexport { HttpClient } from './src/core/httpClient';\nexport type { HttpClientConfig, RequestOptions } from './src/core/httpClient';\nexport {\n    SDKError,\n    APIError,\n    AuthenticationError,\n    ValidationError,\n    NetworkError\n} from './src/core/errors';\n\n// Type exports (group by resource)\nexport * as AuthTypes from './src/types/auth.types';\nexport * as WalletTypes from './src/types/wallet.types';\nexport * as TransactionTypes from './src/types/transaction.types';\nexport * as TransactionApprovalTypes from './src/types/transactionApproval.types';\nexport * as PermissionTypes from './src/types/permission.types';\nexport * as OrganizationTypes from './src/types/organization.types';\nexport * as ApiKeyTypes from './src/types/apiKey.types';\nexport * as ContractTypes from './src/types/contract.types';\n// ... other type exports\n\n// Potentially export common types directly if needed\n// export * from './src/types/common';\n\n// Log message for development execution\nconsole.log(\"Transactions SDK module loaded.\");"
  ],
  "mappings": "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",
  "debugId": "30879FD0323041F364756E2164756E21",
  "names": []
}